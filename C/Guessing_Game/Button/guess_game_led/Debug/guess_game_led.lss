
guess_game_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002530  000025c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000c0  008000c0  00002624  2**0
                  ALLOC
  3 .stab         00001f44  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ac  00000000  00000000  00004568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000770d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000085f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000093a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_3>
      10:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_6>
      1c:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__vector_7>
      20:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_8>
      24:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3d       	cpi	r26, 0xD7	; 215
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 0c 	call	0x1870	; 0x1870 <main>
      8a:	0c 94 96 12 	jmp	0x252c	; 0x252c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Port_Init>:


/************************************************************************
  	  	  	  	  	  	  	  Function Definitions
 ***********************************************************************/
void Port_Init(PORT_Config_t * Port){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Port_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Port_Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3c 83       	std	Y+4, r19	; 0x04
     b62:	2b 83       	std	Y+3, r18	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	f1 f0       	breq	.+60     	; 0xbaa <Port_Init+0x64>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	2c f4       	brge	.+10     	; 0xb82 <Port_Init+0x3c>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	61 f0       	breq	.+24     	; 0xb98 <Port_Init+0x52>
     b80:	2e c0       	rjmp	.+92     	; 0xbde <Port_Init+0x98>
     b82:	2b 81       	ldd	r18, Y+3	; 0x03
     b84:	3c 81       	ldd	r19, Y+4	; 0x04
     b86:	22 30       	cpi	r18, 0x02	; 2
     b88:	31 05       	cpc	r19, r1
     b8a:	c1 f0       	breq	.+48     	; 0xbbc <Port_Init+0x76>
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	83 30       	cpi	r24, 0x03	; 3
     b92:	91 05       	cpc	r25, r1
     b94:	e1 f0       	breq	.+56     	; 0xbce <Port_Init+0x88>
     b96:	23 c0       	rjmp	.+70     	; 0xbde <Port_Init+0x98>
	case A:
		PORTA_DIR = Port->direction;
     b98:	ea e3       	ldi	r30, 0x3A	; 58
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	a9 81       	ldd	r26, Y+1	; 0x01
     b9e:	ba 81       	ldd	r27, Y+2	; 0x02
     ba0:	11 96       	adiw	r26, 0x01	; 1
     ba2:	8c 91       	ld	r24, X
     ba4:	11 97       	sbiw	r26, 0x01	; 1
     ba6:	80 83       	st	Z, r24
     ba8:	1a c0       	rjmp	.+52     	; 0xbde <Port_Init+0x98>
		break;
	case B:
		PORTB_DIR = Port->direction;
     baa:	e7 e3       	ldi	r30, 0x37	; 55
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	a9 81       	ldd	r26, Y+1	; 0x01
     bb0:	ba 81       	ldd	r27, Y+2	; 0x02
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	8c 91       	ld	r24, X
     bb6:	11 97       	sbiw	r26, 0x01	; 1
     bb8:	80 83       	st	Z, r24
     bba:	11 c0       	rjmp	.+34     	; 0xbde <Port_Init+0x98>
		break;
	case C:
		PORTC_DIR = Port->direction;
     bbc:	e4 e3       	ldi	r30, 0x34	; 52
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	a9 81       	ldd	r26, Y+1	; 0x01
     bc2:	ba 81       	ldd	r27, Y+2	; 0x02
     bc4:	11 96       	adiw	r26, 0x01	; 1
     bc6:	8c 91       	ld	r24, X
     bc8:	11 97       	sbiw	r26, 0x01	; 1
     bca:	80 83       	st	Z, r24
     bcc:	08 c0       	rjmp	.+16     	; 0xbde <Port_Init+0x98>
		break;
	case D:
		PORTD_DIR = Port->direction;
     bce:	e1 e3       	ldi	r30, 0x31	; 49
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	a9 81       	ldd	r26, Y+1	; 0x01
     bd4:	ba 81       	ldd	r27, Y+2	; 0x02
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	8c 91       	ld	r24, X
     bda:	11 97       	sbiw	r26, 0x01	; 1
     bdc:	80 83       	st	Z, r24
		break;
	}
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <Write_Port>:

void Write_Port(PORT_Config_t *Port){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <Write_Port+0x6>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <Write_Port+0x8>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	3c 83       	std	Y+4, r19	; 0x04
     c08:	2b 83       	std	Y+3, r18	; 0x03
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	91 05       	cpc	r25, r1
     c12:	e1 f0       	breq	.+56     	; 0xc4c <Write_Port+0x60>
     c14:	2b 81       	ldd	r18, Y+3	; 0x03
     c16:	3c 81       	ldd	r19, Y+4	; 0x04
     c18:	22 30       	cpi	r18, 0x02	; 2
     c1a:	31 05       	cpc	r19, r1
     c1c:	2c f4       	brge	.+10     	; 0xc28 <Write_Port+0x3c>
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	61 f0       	breq	.+24     	; 0xc3e <Write_Port+0x52>
     c26:	26 c0       	rjmp	.+76     	; 0xc74 <Write_Port+0x88>
     c28:	2b 81       	ldd	r18, Y+3	; 0x03
     c2a:	3c 81       	ldd	r19, Y+4	; 0x04
     c2c:	22 30       	cpi	r18, 0x02	; 2
     c2e:	31 05       	cpc	r19, r1
     c30:	a1 f0       	breq	.+40     	; 0xc5a <Write_Port+0x6e>
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	91 05       	cpc	r25, r1
     c3a:	b1 f0       	breq	.+44     	; 0xc68 <Write_Port+0x7c>
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <Write_Port+0x88>
	case A:
		PORTA_OUT = Port->Data;
     c3e:	eb e3       	ldi	r30, 0x3B	; 59
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	a9 81       	ldd	r26, Y+1	; 0x01
     c44:	ba 81       	ldd	r27, Y+2	; 0x02
     c46:	8c 91       	ld	r24, X
     c48:	80 83       	st	Z, r24
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <Write_Port+0x88>
		break;
	case B:
		PORTB_OUT = Port->Data;
     c4c:	e8 e3       	ldi	r30, 0x38	; 56
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	a9 81       	ldd	r26, Y+1	; 0x01
     c52:	ba 81       	ldd	r27, Y+2	; 0x02
     c54:	8c 91       	ld	r24, X
     c56:	80 83       	st	Z, r24
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <Write_Port+0x88>
		break;
	case C:
		PORTC_OUT = Port->Data;
     c5a:	e5 e3       	ldi	r30, 0x35	; 53
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	a9 81       	ldd	r26, Y+1	; 0x01
     c60:	ba 81       	ldd	r27, Y+2	; 0x02
     c62:	8c 91       	ld	r24, X
     c64:	80 83       	st	Z, r24
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <Write_Port+0x88>
		break;
	case D:
		PORTD_OUT = Port->Data;
     c68:	e2 e3       	ldi	r30, 0x32	; 50
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	a9 81       	ldd	r26, Y+1	; 0x01
     c6e:	ba 81       	ldd	r27, Y+2	; 0x02
     c70:	8c 91       	ld	r24, X
     c72:	80 83       	st	Z, r24
		break;
	}
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <Write_Pin>:

void Write_Pin(PORT_t port, uint8_t pin, uint8_t Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <Write_Pin+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <Write_Pin+0x8>
     c8a:	0f 92       	push	r0
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	6a 83       	std	Y+2, r22	; 0x02
     c94:	4b 83       	std	Y+3, r20	; 0x03
	switch(port){
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	3d 83       	std	Y+5, r19	; 0x05
     c9e:	2c 83       	std	Y+4, r18	; 0x04
     ca0:	6c 81       	ldd	r22, Y+4	; 0x04
     ca2:	7d 81       	ldd	r23, Y+5	; 0x05
     ca4:	61 30       	cpi	r22, 0x01	; 1
     ca6:	71 05       	cpc	r23, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <Write_Pin+0x2a>
     caa:	3d c0       	rjmp	.+122    	; 0xd26 <Write_Pin+0xa4>
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	91 05       	cpc	r25, r1
     cb4:	34 f4       	brge	.+12     	; 0xcc2 <Write_Pin+0x40>
     cb6:	2c 81       	ldd	r18, Y+4	; 0x04
     cb8:	3d 81       	ldd	r19, Y+5	; 0x05
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	71 f0       	breq	.+28     	; 0xcdc <Write_Pin+0x5a>
     cc0:	a0 c0       	rjmp	.+320    	; 0xe02 <Write_Pin+0x180>
     cc2:	6c 81       	ldd	r22, Y+4	; 0x04
     cc4:	7d 81       	ldd	r23, Y+5	; 0x05
     cc6:	62 30       	cpi	r22, 0x02	; 2
     cc8:	71 05       	cpc	r23, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <Write_Pin+0x4c>
     ccc:	51 c0       	rjmp	.+162    	; 0xd70 <Write_Pin+0xee>
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	9d 81       	ldd	r25, Y+5	; 0x05
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <Write_Pin+0x58>
     cd8:	70 c0       	rjmp	.+224    	; 0xdba <Write_Pin+0x138>
     cda:	93 c0       	rjmp	.+294    	; 0xe02 <Write_Pin+0x180>
	case A:
		PORTA_OUT = (PORTA_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     cdc:	ab e3       	ldi	r26, 0x3B	; 59
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	eb e3       	ldi	r30, 0x3B	; 59
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	48 2f       	mov	r20, r24
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <Write_Pin+0x76>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	2a 95       	dec	r18
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <Write_Pin+0x72>
     cfc:	80 95       	com	r24
     cfe:	48 23       	and	r20, r24
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	9c 01       	movw	r18, r24
     d08:	21 70       	andi	r18, 0x01	; 1
     d0a:	30 70       	andi	r19, 0x00	; 0
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	b9 01       	movw	r22, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <Write_Pin+0x98>
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	8a 95       	dec	r24
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <Write_Pin+0x94>
     d1e:	cb 01       	movw	r24, r22
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	6e c0       	rjmp	.+220    	; 0xe02 <Write_Pin+0x180>
		break;
	case B:
		PORTB_OUT = (PORTB_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     d26:	a8 e3       	ldi	r26, 0x38	; 56
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <Write_Pin+0xc0>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	2a 95       	dec	r18
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <Write_Pin+0xbc>
     d46:	80 95       	com	r24
     d48:	48 23       	and	r20, r24
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c 01       	movw	r18, r24
     d52:	21 70       	andi	r18, 0x01	; 1
     d54:	30 70       	andi	r19, 0x00	; 0
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	b9 01       	movw	r22, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <Write_Pin+0xe2>
     d60:	66 0f       	add	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <Write_Pin+0xde>
     d68:	cb 01       	movw	r24, r22
     d6a:	84 2b       	or	r24, r20
     d6c:	8c 93       	st	X, r24
     d6e:	49 c0       	rjmp	.+146    	; 0xe02 <Write_Pin+0x180>
		break;
	case C:
		PORTC_OUT = (PORTC_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     d70:	a5 e3       	ldi	r26, 0x35	; 53
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e3       	ldi	r30, 0x35	; 53
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <Write_Pin+0x10a>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	2a 95       	dec	r18
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <Write_Pin+0x106>
     d90:	80 95       	com	r24
     d92:	48 23       	and	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 01       	movw	r18, r24
     d9c:	21 70       	andi	r18, 0x01	; 1
     d9e:	30 70       	andi	r19, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	b9 01       	movw	r22, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <Write_Pin+0x12c>
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <Write_Pin+0x128>
     db2:	cb 01       	movw	r24, r22
     db4:	84 2b       	or	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	24 c0       	rjmp	.+72     	; 0xe02 <Write_Pin+0x180>
		break;
	case D:
		PORTD_OUT = (PORTD_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     dba:	a2 e3       	ldi	r26, 0x32	; 50
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e2 e3       	ldi	r30, 0x32	; 50
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <Write_Pin+0x154>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	2a 95       	dec	r18
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <Write_Pin+0x150>
     dda:	80 95       	com	r24
     ddc:	48 23       	and	r20, r24
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 01       	movw	r18, r24
     de6:	21 70       	andi	r18, 0x01	; 1
     de8:	30 70       	andi	r19, 0x00	; 0
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	b9 01       	movw	r22, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <Write_Pin+0x176>
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <Write_Pin+0x172>
     dfc:	cb 01       	movw	r24, r22
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
		break;
	}
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <Read_Port>:

void Read_Port(PORT_Config_t *Port){
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <Read_Port+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <Read_Port+0x8>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3c 83       	std	Y+4, r19	; 0x04
     e2e:	2b 83       	std	Y+3, r18	; 0x03
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	e1 f0       	breq	.+56     	; 0xe72 <Read_Port+0x60>
     e3a:	2b 81       	ldd	r18, Y+3	; 0x03
     e3c:	3c 81       	ldd	r19, Y+4	; 0x04
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <Read_Port+0x3c>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f0       	breq	.+24     	; 0xe64 <Read_Port+0x52>
     e4c:	26 c0       	rjmp	.+76     	; 0xe9a <Read_Port+0x88>
     e4e:	2b 81       	ldd	r18, Y+3	; 0x03
     e50:	3c 81       	ldd	r19, Y+4	; 0x04
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	a1 f0       	breq	.+40     	; 0xe80 <Read_Port+0x6e>
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <Read_Port+0x7c>
     e62:	1b c0       	rjmp	.+54     	; 0xe9a <Read_Port+0x88>
	case A:
		Port->Data= PORTA_IN;
     e64:	e9 e3       	ldi	r30, 0x39	; 57
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	80 83       	st	Z, r24
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <Read_Port+0x88>
		break;
	case B:
		Port->Data= PORTB_IN;
     e72:	e6 e3       	ldi	r30, 0x36	; 54
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	80 83       	st	Z, r24
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <Read_Port+0x88>
		break;
	case C:
		Port->Data= PORTC_IN;
     e80:	e3 e3       	ldi	r30, 0x33	; 51
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	80 83       	st	Z, r24
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <Read_Port+0x88>
		break;
	case D:
		Port->Data= PORTD_IN;
     e8e:	e0 e3       	ldi	r30, 0x30	; 48
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
		break;
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     eb0:	e4 e3       	ldi	r30, 0x34	; 52
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     eb8:	a1 e3       	ldi	r26, 0x31	; 49
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e1 e3       	ldi	r30, 0x31	; 49
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 67       	ori	r24, 0x70	; 112
     ec4:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     ec6:	88 e3       	ldi	r24, 0x38	; 56
     ec8:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     ecc:	8c e0       	ldi	r24, 0x0C	; 12
     ece:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	e9 97       	sbiw	r28, 0x39	; 57
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     ef4:	a2 e3       	ldi	r26, 0x32	; 50
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e2 e3       	ldi	r30, 0x32	; 50
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7e       	andi	r24, 0xEF	; 239
     f00:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     f02:	a2 e3       	ldi	r26, 0x32	; 50
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7d       	andi	r24, 0xDF	; 223
     f0e:	8c 93       	st	X, r24
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e8       	ldi	r26, 0x80	; 128
     f16:	bf e3       	ldi	r27, 0x3F	; 63
     f18:	8d ab       	std	Y+53, r24	; 0x35
     f1a:	9e ab       	std	Y+54, r25	; 0x36
     f1c:	af ab       	std	Y+55, r26	; 0x37
     f1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f20:	6d a9       	ldd	r22, Y+53	; 0x35
     f22:	7e a9       	ldd	r23, Y+54	; 0x36
     f24:	8f a9       	ldd	r24, Y+55	; 0x37
     f26:	98 ad       	ldd	r25, Y+56	; 0x38
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a e7       	ldi	r20, 0x7A	; 122
     f2e:	53 e4       	ldi	r21, 0x43	; 67
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	89 ab       	std	Y+49, r24	; 0x31
     f3a:	9a ab       	std	Y+50, r25	; 0x32
     f3c:	ab ab       	std	Y+51, r26	; 0x33
     f3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f40:	69 a9       	ldd	r22, Y+49	; 0x31
     f42:	7a a9       	ldd	r23, Y+50	; 0x32
     f44:	8b a9       	ldd	r24, Y+51	; 0x33
     f46:	9c a9       	ldd	r25, Y+52	; 0x34
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <LCD_sendCommand+0x84>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	98 ab       	std	Y+48, r25	; 0x30
     f5e:	8f a7       	std	Y+47, r24	; 0x2f
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     f62:	69 a9       	ldd	r22, Y+49	; 0x31
     f64:	7a a9       	ldd	r23, Y+50	; 0x32
     f66:	8b a9       	ldd	r24, Y+51	; 0x33
     f68:	9c a9       	ldd	r25, Y+52	; 0x34
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	6d a9       	ldd	r22, Y+53	; 0x35
     f7c:	7e a9       	ldd	r23, Y+54	; 0x36
     f7e:	8f a9       	ldd	r24, Y+55	; 0x37
     f80:	98 ad       	ldd	r25, Y+56	; 0x38
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	98 ab       	std	Y+48, r25	; 0x30
     fa0:	8f a7       	std	Y+47, r24	; 0x2f
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <LCD_sendCommand+0xe4>
     fa4:	89 e1       	ldi	r24, 0x19	; 25
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9e a7       	std	Y+46, r25	; 0x2e
     faa:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fac:	8d a5       	ldd	r24, Y+45	; 0x2d
     fae:	9e a5       	ldd	r25, Y+46	; 0x2e
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <LCD_sendCommand+0xd2>
     fb4:	9e a7       	std	Y+46, r25	; 0x2e
     fb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
     fba:	98 a9       	ldd	r25, Y+48	; 0x30
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	98 ab       	std	Y+48, r25	; 0x30
     fc0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc4:	98 a9       	ldd	r25, Y+48	; 0x30
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <LCD_sendCommand+0xc6>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	69 a9       	ldd	r22, Y+49	; 0x31
     fce:	7a a9       	ldd	r23, Y+50	; 0x32
     fd0:	8b a9       	ldd	r24, Y+51	; 0x33
     fd2:	9c a9       	ldd	r25, Y+52	; 0x34
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	98 ab       	std	Y+48, r25	; 0x30
     fde:	8f a7       	std	Y+47, r24	; 0x2f
     fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fe2:	98 a9       	ldd	r25, Y+48	; 0x30
     fe4:	9c a7       	std	Y+44, r25	; 0x2c
     fe6:	8b a7       	std	Y+43, r24	; 0x2b
     fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
     fea:	9c a5       	ldd	r25, Y+44	; 0x2c
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <LCD_sendCommand+0x10e>
     ff0:	9c a7       	std	Y+44, r25	; 0x2c
     ff2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 64       	ori	r24, 0x40	; 64
    1000:	8c 93       	st	X, r24
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e8       	ldi	r26, 0x80	; 128
    1008:	bf e3       	ldi	r27, 0x3F	; 63
    100a:	8f a3       	std	Y+39, r24	; 0x27
    100c:	98 a7       	std	Y+40, r25	; 0x28
    100e:	a9 a7       	std	Y+41, r26	; 0x29
    1010:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1012:	6f a1       	ldd	r22, Y+39	; 0x27
    1014:	78 a5       	ldd	r23, Y+40	; 0x28
    1016:	89 a5       	ldd	r24, Y+41	; 0x29
    1018:	9a a5       	ldd	r25, Y+42	; 0x2a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a e7       	ldi	r20, 0x7A	; 122
    1020:	53 e4       	ldi	r21, 0x43	; 67
    1022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8b a3       	std	Y+35, r24	; 0x23
    102c:	9c a3       	std	Y+36, r25	; 0x24
    102e:	ad a3       	std	Y+37, r26	; 0x25
    1030:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1032:	6b a1       	ldd	r22, Y+35	; 0x23
    1034:	7c a1       	ldd	r23, Y+36	; 0x24
    1036:	8d a1       	ldd	r24, Y+37	; 0x25
    1038:	9e a1       	ldd	r25, Y+38	; 0x26
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e8       	ldi	r20, 0x80	; 128
    1040:	5f e3       	ldi	r21, 0x3F	; 63
    1042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1046:	88 23       	and	r24, r24
    1048:	2c f4       	brge	.+10     	; 0x1054 <LCD_sendCommand+0x176>
		__ticks = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9a a3       	std	Y+34, r25	; 0x22
    1050:	89 a3       	std	Y+33, r24	; 0x21
    1052:	3f c0       	rjmp	.+126    	; 0x10d2 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1054:	6b a1       	ldd	r22, Y+35	; 0x23
    1056:	7c a1       	ldd	r23, Y+36	; 0x24
    1058:	8d a1       	ldd	r24, Y+37	; 0x25
    105a:	9e a1       	ldd	r25, Y+38	; 0x26
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	3f ef       	ldi	r19, 0xFF	; 255
    1060:	4f e7       	ldi	r20, 0x7F	; 127
    1062:	57 e4       	ldi	r21, 0x47	; 71
    1064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1068:	18 16       	cp	r1, r24
    106a:	4c f5       	brge	.+82     	; 0x10be <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	6f a1       	ldd	r22, Y+39	; 0x27
    106e:	78 a5       	ldd	r23, Y+40	; 0x28
    1070:	89 a5       	ldd	r24, Y+41	; 0x29
    1072:	9a a5       	ldd	r25, Y+42	; 0x2a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e2       	ldi	r20, 0x20	; 32
    107a:	51 e4       	ldi	r21, 0x41	; 65
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9a a3       	std	Y+34, r25	; 0x22
    1092:	89 a3       	std	Y+33, r24	; 0x21
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <LCD_sendCommand+0x1d6>
    1096:	89 e1       	ldi	r24, 0x19	; 25
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	98 a3       	std	Y+32, r25	; 0x20
    109c:	8f 8f       	std	Y+31, r24	; 0x1f
    109e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a0:	98 a1       	ldd	r25, Y+32	; 0x20
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_sendCommand+0x1c4>
    10a6:	98 a3       	std	Y+32, r25	; 0x20
    10a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10aa:	89 a1       	ldd	r24, Y+33	; 0x21
    10ac:	9a a1       	ldd	r25, Y+34	; 0x22
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9a a3       	std	Y+34, r25	; 0x22
    10b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b4:	89 a1       	ldd	r24, Y+33	; 0x21
    10b6:	9a a1       	ldd	r25, Y+34	; 0x22
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	69 f7       	brne	.-38     	; 0x1096 <LCD_sendCommand+0x1b8>
    10bc:	14 c0       	rjmp	.+40     	; 0x10e6 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10be:	6b a1       	ldd	r22, Y+35	; 0x23
    10c0:	7c a1       	ldd	r23, Y+36	; 0x24
    10c2:	8d a1       	ldd	r24, Y+37	; 0x25
    10c4:	9e a1       	ldd	r25, Y+38	; 0x26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9a a3       	std	Y+34, r25	; 0x22
    10d0:	89 a3       	std	Y+33, r24	; 0x21
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	9e 8f       	std	Y+30, r25	; 0x1e
    10d8:	8d 8f       	std	Y+29, r24	; 0x1d
    10da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <LCD_sendCommand+0x200>
    10e2:	9e 8f       	std	Y+30, r25	; 0x1e
    10e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    10e6:	e5 e3       	ldi	r30, 0x35	; 53
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	89 ad       	ldd	r24, Y+57	; 0x39
    10ec:	80 83       	st	Z, r24
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e8       	ldi	r26, 0x80	; 128
    10f4:	bf e3       	ldi	r27, 0x3F	; 63
    10f6:	89 8f       	std	Y+25, r24	; 0x19
    10f8:	9a 8f       	std	Y+26, r25	; 0x1a
    10fa:	ab 8f       	std	Y+27, r26	; 0x1b
    10fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4a e7       	ldi	r20, 0x7A	; 122
    110c:	53 e4       	ldi	r21, 0x43	; 67
    110e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	8d 8b       	std	Y+21, r24	; 0x15
    1118:	9e 8b       	std	Y+22, r25	; 0x16
    111a:	af 8b       	std	Y+23, r26	; 0x17
    111c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    111e:	6d 89       	ldd	r22, Y+21	; 0x15
    1120:	7e 89       	ldd	r23, Y+22	; 0x16
    1122:	8f 89       	ldd	r24, Y+23	; 0x17
    1124:	98 8d       	ldd	r25, Y+24	; 0x18
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	5f e3       	ldi	r21, 0x3F	; 63
    112e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1132:	88 23       	and	r24, r24
    1134:	2c f4       	brge	.+10     	; 0x1140 <LCD_sendCommand+0x262>
		__ticks = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9c 8b       	std	Y+20, r25	; 0x14
    113c:	8b 8b       	std	Y+19, r24	; 0x13
    113e:	3f c0       	rjmp	.+126    	; 0x11be <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1140:	6d 89       	ldd	r22, Y+21	; 0x15
    1142:	7e 89       	ldd	r23, Y+22	; 0x16
    1144:	8f 89       	ldd	r24, Y+23	; 0x17
    1146:	98 8d       	ldd	r25, Y+24	; 0x18
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1154:	18 16       	cp	r1, r24
    1156:	4c f5       	brge	.+82     	; 0x11aa <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1158:	69 8d       	ldd	r22, Y+25	; 0x19
    115a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e2       	ldi	r20, 0x20	; 32
    1166:	51 e4       	ldi	r21, 0x41	; 65
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9c 8b       	std	Y+20, r25	; 0x14
    117e:	8b 8b       	std	Y+19, r24	; 0x13
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <LCD_sendCommand+0x2c2>
    1182:	89 e1       	ldi	r24, 0x19	; 25
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9a 8b       	std	Y+18, r25	; 0x12
    1188:	89 8b       	std	Y+17, r24	; 0x11
    118a:	89 89       	ldd	r24, Y+17	; 0x11
    118c:	9a 89       	ldd	r25, Y+18	; 0x12
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <LCD_sendCommand+0x2b0>
    1192:	9a 8b       	std	Y+18, r25	; 0x12
    1194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	8b 89       	ldd	r24, Y+19	; 0x13
    1198:	9c 89       	ldd	r25, Y+20	; 0x14
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	9c 8b       	std	Y+20, r25	; 0x14
    119e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a0:	8b 89       	ldd	r24, Y+19	; 0x13
    11a2:	9c 89       	ldd	r25, Y+20	; 0x14
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	69 f7       	brne	.-38     	; 0x1182 <LCD_sendCommand+0x2a4>
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11aa:	6d 89       	ldd	r22, Y+21	; 0x15
    11ac:	7e 89       	ldd	r23, Y+22	; 0x16
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	98 8d       	ldd	r25, Y+24	; 0x18
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	8b 8b       	std	Y+19, r24	; 0x13
    11be:	8b 89       	ldd	r24, Y+19	; 0x13
    11c0:	9c 89       	ldd	r25, Y+20	; 0x14
    11c2:	98 8b       	std	Y+16, r25	; 0x10
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
    11c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c8:	98 89       	ldd	r25, Y+16	; 0x10
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <LCD_sendCommand+0x2ec>
    11ce:	98 8b       	std	Y+16, r25	; 0x10
    11d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    11d2:	a2 e3       	ldi	r26, 0x32	; 50
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e2 e3       	ldi	r30, 0x32	; 50
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 7b       	andi	r24, 0xBF	; 191
    11de:	8c 93       	st	X, r24
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a0 e8       	ldi	r26, 0x80	; 128
    11e6:	bf e3       	ldi	r27, 0x3F	; 63
    11e8:	8b 87       	std	Y+11, r24	; 0x0b
    11ea:	9c 87       	std	Y+12, r25	; 0x0c
    11ec:	ad 87       	std	Y+13, r26	; 0x0d
    11ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4a e7       	ldi	r20, 0x7A	; 122
    11fe:	53 e4       	ldi	r21, 0x43	; 67
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8f 83       	std	Y+7, r24	; 0x07
    120a:	98 87       	std	Y+8, r25	; 0x08
    120c:	a9 87       	std	Y+9, r26	; 0x09
    120e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1210:	6f 81       	ldd	r22, Y+7	; 0x07
    1212:	78 85       	ldd	r23, Y+8	; 0x08
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	2c f4       	brge	.+10     	; 0x1232 <LCD_sendCommand+0x354>
		__ticks = 1;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	3f c0       	rjmp	.+126    	; 0x12b0 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	57 e4       	ldi	r21, 0x47	; 71
    1242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	4c f5       	brge	.+82     	; 0x129c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124a:	6b 85       	ldd	r22, Y+11	; 0x0b
    124c:	7c 85       	ldd	r23, Y+12	; 0x0c
    124e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1250:	9e 85       	ldd	r25, Y+14	; 0x0e
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <LCD_sendCommand+0x3b4>
    1274:	89 e1       	ldi	r24, 0x19	; 25
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <LCD_sendCommand+0x3a2>
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f7       	brne	.-38     	; 0x1274 <LCD_sendCommand+0x396>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <LCD_sendCommand+0x3de>
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    12c4:	e9 96       	adiw	r28, 0x39	; 57
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	e9 97       	sbiw	r28, 0x39	; 57
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    12ec:	a2 e3       	ldi	r26, 0x32	; 50
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    12fa:	a2 e3       	ldi	r26, 0x32	; 50
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	8c 93       	st	X, r24
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e8       	ldi	r26, 0x80	; 128
    130e:	bf e3       	ldi	r27, 0x3F	; 63
    1310:	8d ab       	std	Y+53, r24	; 0x35
    1312:	9e ab       	std	Y+54, r25	; 0x36
    1314:	af ab       	std	Y+55, r26	; 0x37
    1316:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	6d a9       	ldd	r22, Y+53	; 0x35
    131a:	7e a9       	ldd	r23, Y+54	; 0x36
    131c:	8f a9       	ldd	r24, Y+55	; 0x37
    131e:	98 ad       	ldd	r25, Y+56	; 0x38
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a e7       	ldi	r20, 0x7A	; 122
    1326:	53 e4       	ldi	r21, 0x43	; 67
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	89 ab       	std	Y+49, r24	; 0x31
    1332:	9a ab       	std	Y+50, r25	; 0x32
    1334:	ab ab       	std	Y+51, r26	; 0x33
    1336:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1338:	69 a9       	ldd	r22, Y+49	; 0x31
    133a:	7a a9       	ldd	r23, Y+50	; 0x32
    133c:	8b a9       	ldd	r24, Y+51	; 0x33
    133e:	9c a9       	ldd	r25, Y+52	; 0x34
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <LCD_displayCharacter+0x84>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	98 ab       	std	Y+48, r25	; 0x30
    1356:	8f a7       	std	Y+47, r24	; 0x2f
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	4c f5       	brge	.+82     	; 0x13c4 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1372:	6d a9       	ldd	r22, Y+53	; 0x35
    1374:	7e a9       	ldd	r23, Y+54	; 0x36
    1376:	8f a9       	ldd	r24, Y+55	; 0x37
    1378:	98 ad       	ldd	r25, Y+56	; 0x38
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	98 ab       	std	Y+48, r25	; 0x30
    1398:	8f a7       	std	Y+47, r24	; 0x2f
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <LCD_displayCharacter+0xe4>
    139c:	89 e1       	ldi	r24, 0x19	; 25
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e a7       	std	Y+46, r25	; 0x2e
    13a2:	8d a7       	std	Y+45, r24	; 0x2d
    13a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD_displayCharacter+0xd2>
    13ac:	9e a7       	std	Y+46, r25	; 0x2e
    13ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b2:	98 a9       	ldd	r25, Y+48	; 0x30
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    13bc:	98 a9       	ldd	r25, Y+48	; 0x30
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f7       	brne	.-38     	; 0x139c <LCD_displayCharacter+0xc6>
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	69 a9       	ldd	r22, Y+49	; 0x31
    13c6:	7a a9       	ldd	r23, Y+50	; 0x32
    13c8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ca:	9c a9       	ldd	r25, Y+52	; 0x34
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	98 ab       	std	Y+48, r25	; 0x30
    13d6:	8f a7       	std	Y+47, r24	; 0x2f
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	9c a7       	std	Y+44, r25	; 0x2c
    13de:	8b a7       	std	Y+43, r24	; 0x2b
    13e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_displayCharacter+0x10e>
    13e8:	9c a7       	std	Y+44, r25	; 0x2c
    13ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    13ec:	a2 e3       	ldi	r26, 0x32	; 50
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e2 e3       	ldi	r30, 0x32	; 50
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 64       	ori	r24, 0x40	; 64
    13f8:	8c 93       	st	X, r24
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e8       	ldi	r26, 0x80	; 128
    1400:	bf e3       	ldi	r27, 0x3F	; 63
    1402:	8f a3       	std	Y+39, r24	; 0x27
    1404:	98 a7       	std	Y+40, r25	; 0x28
    1406:	a9 a7       	std	Y+41, r26	; 0x29
    1408:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6f a1       	ldd	r22, Y+39	; 0x27
    140c:	78 a5       	ldd	r23, Y+40	; 0x28
    140e:	89 a5       	ldd	r24, Y+41	; 0x29
    1410:	9a a5       	ldd	r25, Y+42	; 0x2a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a e7       	ldi	r20, 0x7A	; 122
    1418:	53 e4       	ldi	r21, 0x43	; 67
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8b a3       	std	Y+35, r24	; 0x23
    1424:	9c a3       	std	Y+36, r25	; 0x24
    1426:	ad a3       	std	Y+37, r26	; 0x25
    1428:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    142a:	6b a1       	ldd	r22, Y+35	; 0x23
    142c:	7c a1       	ldd	r23, Y+36	; 0x24
    142e:	8d a1       	ldd	r24, Y+37	; 0x25
    1430:	9e a1       	ldd	r25, Y+38	; 0x26
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <LCD_displayCharacter+0x176>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    144c:	6b a1       	ldd	r22, Y+35	; 0x23
    144e:	7c a1       	ldd	r23, Y+36	; 0x24
    1450:	8d a1       	ldd	r24, Y+37	; 0x25
    1452:	9e a1       	ldd	r25, Y+38	; 0x26
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6f a1       	ldd	r22, Y+39	; 0x27
    1466:	78 a5       	ldd	r23, Y+40	; 0x28
    1468:	89 a5       	ldd	r24, Y+41	; 0x29
    146a:	9a a5       	ldd	r25, Y+42	; 0x2a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_displayCharacter+0x1d6>
    148e:	89 e1       	ldi	r24, 0x19	; 25
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	98 a3       	std	Y+32, r25	; 0x20
    1494:	8f 8f       	std	Y+31, r24	; 0x1f
    1496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1498:	98 a1       	ldd	r25, Y+32	; 0x20
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_displayCharacter+0x1c4>
    149e:	98 a3       	std	Y+32, r25	; 0x20
    14a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	89 a1       	ldd	r24, Y+33	; 0x21
    14a4:	9a a1       	ldd	r25, Y+34	; 0x22
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	89 a1       	ldd	r24, Y+33	; 0x21
    14ae:	9a a1       	ldd	r25, Y+34	; 0x22
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <LCD_displayCharacter+0x1b8>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6b a1       	ldd	r22, Y+35	; 0x23
    14b8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ba:	8d a1       	ldd	r24, Y+37	; 0x25
    14bc:	9e a1       	ldd	r25, Y+38	; 0x26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	9a a1       	ldd	r25, Y+34	; 0x22
    14ce:	9e 8f       	std	Y+30, r25	; 0x1e
    14d0:	8d 8f       	std	Y+29, r24	; 0x1d
    14d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_displayCharacter+0x200>
    14da:	9e 8f       	std	Y+30, r25	; 0x1e
    14dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	89 ad       	ldd	r24, Y+57	; 0x39
    14e4:	80 83       	st	Z, r24
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e8       	ldi	r26, 0x80	; 128
    14ec:	bf e3       	ldi	r27, 0x3F	; 63
    14ee:	89 8f       	std	Y+25, r24	; 0x19
    14f0:	9a 8f       	std	Y+26, r25	; 0x1a
    14f2:	ab 8f       	std	Y+27, r26	; 0x1b
    14f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	69 8d       	ldd	r22, Y+25	; 0x19
    14f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a e7       	ldi	r20, 0x7A	; 122
    1504:	53 e4       	ldi	r21, 0x43	; 67
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8d 8b       	std	Y+21, r24	; 0x15
    1510:	9e 8b       	std	Y+22, r25	; 0x16
    1512:	af 8b       	std	Y+23, r26	; 0x17
    1514:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <LCD_displayCharacter+0x262>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	69 8d       	ldd	r22, Y+25	; 0x19
    1552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9c 8b       	std	Y+20, r25	; 0x14
    1576:	8b 8b       	std	Y+19, r24	; 0x13
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <LCD_displayCharacter+0x2c2>
    157a:	89 e1       	ldi	r24, 0x19	; 25
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9a 8b       	std	Y+18, r25	; 0x12
    1580:	89 8b       	std	Y+17, r24	; 0x11
    1582:	89 89       	ldd	r24, Y+17	; 0x11
    1584:	9a 89       	ldd	r25, Y+18	; 0x12
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_displayCharacter+0x2b0>
    158a:	9a 8b       	std	Y+18, r25	; 0x12
    158c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	8b 89       	ldd	r24, Y+19	; 0x13
    1590:	9c 89       	ldd	r25, Y+20	; 0x14
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9c 8b       	std	Y+20, r25	; 0x14
    1596:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	8b 89       	ldd	r24, Y+19	; 0x13
    159a:	9c 89       	ldd	r25, Y+20	; 0x14
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <LCD_displayCharacter+0x2a4>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	6d 89       	ldd	r22, Y+21	; 0x15
    15a4:	7e 89       	ldd	r23, Y+22	; 0x16
    15a6:	8f 89       	ldd	r24, Y+23	; 0x17
    15a8:	98 8d       	ldd	r25, Y+24	; 0x18
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	98 8b       	std	Y+16, r25	; 0x10
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
    15be:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c0:	98 89       	ldd	r25, Y+16	; 0x10
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <LCD_displayCharacter+0x2ec>
    15c6:	98 8b       	std	Y+16, r25	; 0x10
    15c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    15ca:	a2 e3       	ldi	r26, 0x32	; 50
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e2 e3       	ldi	r30, 0x32	; 50
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8f 7b       	andi	r24, 0xBF	; 191
    15d6:	8c 93       	st	X, r24
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e8       	ldi	r26, 0x80	; 128
    15de:	bf e3       	ldi	r27, 0x3F	; 63
    15e0:	8b 87       	std	Y+11, r24	; 0x0b
    15e2:	9c 87       	std	Y+12, r25	; 0x0c
    15e4:	ad 87       	std	Y+13, r26	; 0x0d
    15e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	53 e4       	ldi	r21, 0x43	; 67
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	8f 83       	std	Y+7, r24	; 0x07
    1602:	98 87       	std	Y+8, r25	; 0x08
    1604:	a9 87       	std	Y+9, r26	; 0x09
    1606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <LCD_displayCharacter+0x354>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	3f c0       	rjmp	.+126    	; 0x16a8 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163e:	18 16       	cp	r1, r24
    1640:	4c f5       	brge	.+82     	; 0x1694 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	0f c0       	rjmp	.+30     	; 0x168a <LCD_displayCharacter+0x3b4>
    166c:	89 e1       	ldi	r24, 0x19	; 25
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	8b 83       	std	Y+3, r24	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_displayCharacter+0x3a2>
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f7       	brne	.-38     	; 0x166c <LCD_displayCharacter+0x396>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_displayCharacter+0x3de>
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    16bc:	e9 96       	adiw	r28, 0x39	; 57
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <LCD_displayString+0x6>
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	9b 83       	std	Y+3, r25	; 0x03
    16dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	fc 01       	movw	r30, r24
    16ee:	e2 0f       	add	r30, r18
    16f0:	f3 1f       	adc	r31, r19
    16f2:	80 81       	ld	r24, Z
    16f4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_displayCharacter>
		i++;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	8f 5f       	subi	r24, 0xFF	; 255
    16fc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	fc 01       	movw	r30, r24
    170a:	e2 0f       	add	r30, r18
    170c:	f3 1f       	adc	r31, r19
    170e:	80 81       	ld	r24, Z
    1710:	88 23       	and	r24, r24
    1712:	39 f7       	brne	.-50     	; 0x16e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <LCD_goToRowColumn+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <LCD_goToRowColumn+0x8>
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* first of all calculate the required address */
	switch(row)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3d 83       	std	Y+5, r19	; 0x05
    173a:	2c 83       	std	Y+4, r18	; 0x04
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	c1 f0       	breq	.+48     	; 0x1776 <LCD_goToRowColumn+0x56>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <LCD_goToRowColumn+0x3a>
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	61 f0       	breq	.+24     	; 0x1770 <LCD_goToRowColumn+0x50>
    1758:	19 c0       	rjmp	.+50     	; 0x178c <LCD_goToRowColumn+0x6c>
    175a:	2c 81       	ldd	r18, Y+4	; 0x04
    175c:	3d 81       	ldd	r19, Y+5	; 0x05
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	69 f0       	breq	.+26     	; 0x177e <LCD_goToRowColumn+0x5e>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	61 f0       	breq	.+24     	; 0x1786 <LCD_goToRowColumn+0x66>
    176e:	0e c0       	rjmp	.+28     	; 0x178c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	0b c0       	rjmp	.+22     	; 0x178c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 5c       	subi	r24, 0xC0	; 192
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	07 c0       	rjmp	.+14     	; 0x178c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 5f       	subi	r24, 0xF0	; 240
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	03 c0       	rjmp	.+6      	; 0x178c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 5b       	subi	r24, 0xB0	; 176
    178a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <LCD_displayStringRowColumn+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <LCD_displayStringRowColumn+0x8>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	6a 83       	std	Y+2, r22	; 0x02
    17b4:	5c 83       	std	Y+4, r21	; 0x04
    17b6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	6a 81       	ldd	r22, Y+2	; 0x02
    17bc:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_displayString>
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	62 97       	sbiw	r28, 0x12	; 18
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	9a 8b       	std	Y+18, r25	; 0x12
    17ec:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    17ee:	89 89       	ldd	r24, Y+17	; 0x11
    17f0:	9a 89       	ldd	r25, Y+18	; 0x12
    17f2:	9e 01       	movw	r18, r28
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	b9 01       	movw	r22, r18
    17fa:	4a e0       	ldi	r20, 0x0A	; 10
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	0e 94 09 12 	call	0x2412	; 0x2412 <itoa>
   LCD_displayString(buff);
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_displayString>
}
    180a:	62 96       	adiw	r28, 0x12	; 18
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <Button_Init>:

/************************************************************************
  	  	  	  	  	  	  	  Function Definitions
 ***********************************************************************/

void Button_Init(){
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	Porta.port = A;					// set port to PORT A
    1838:	10 92 c2 00 	sts	0x00C2, r1
	Porta.direction &= ~BUTTON1;	// set direction of PA0 to input
    183c:	80 91 c1 00 	lds	r24, 0x00C1
    1840:	8e 7f       	andi	r24, 0xFE	; 254
    1842:	80 93 c1 00 	sts	0x00C1, r24
	Port_Init(&Porta);				// initialize Port A
    1846:	80 ec       	ldi	r24, 0xC0	; 192
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Port_Init>
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <Check_Button>:



uint8_t Check_Button(){
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	Read_Port(&Porta);				// Read Value of PORT A
    185c:	80 ec       	ldi	r24, 0xC0	; 192
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 09 07 	call	0xe12	; 0xe12 <Read_Port>
	return (Porta.Data & BUTTON1);	// return only the value of button after the mask
    1864:	80 91 c0 00 	lds	r24, 0x00C0
    1868:	81 70       	andi	r24, 0x01	; 1
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <main>:

Timer_ConfigType timer1_Strut;

uint8_t count = 0;
int main(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	2e 97       	sbiw	r28, 0x0e	; 14
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
	/*timer1 init interrupt*/
	SREG |= (1<<7);                   /* Enable Global Interrupt */
    1884:	af e5       	ldi	r26, 0x5F	; 95
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ef e5       	ldi	r30, 0x5F	; 95
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 68       	ori	r24, 0x80	; 128
    1890:	8c 93       	st	X, r24


	LCD_init();                        /* initialize LCD */
    1892:	0e 94 54 07 	call	0xea8	; 0xea8 <LCD_init>
	Button_Init();                     /* initialize Buttons */
    1896:	0e 94 18 0c 	call	0x1830	; 0x1830 <Button_Init>
	LCD_displayStringRowColumn(0,2,"Please Guess");
    189a:	20 e6       	ldi	r18, 0x60	; 96
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	a9 01       	movw	r20, r18
    18a4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"the number");
    18a8:	2d e6       	ldi	r18, 0x6D	; 109
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	63 e0       	ldi	r22, 0x03	; 3
    18b0:	a9 01       	movw	r20, r18
    18b2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
	//_delay_ms(4000); /* wait four seconds */


	//LCD_clearScreen(); /* clear the LCD display */

	timer1_Strut.mode				= CTC_MODE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 cb 00 	sts	0x00CB, r24
	timer1_Strut.clock				= F_CPU_1024;
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	80 93 ca 00 	sts	0x00CA, r24
	timer1_Strut.PWM				= PWM_0;
    18c2:	10 92 cd 00 	sts	0x00CD, r1
	timer1_Strut.initial			= 0;
    18c6:	10 92 d0 00 	sts	0x00D0, r1
    18ca:	10 92 cf 00 	sts	0x00CF, r1
	timer1_Strut.top_count			= 5000;
    18ce:	88 e8       	ldi	r24, 0x88	; 136
    18d0:	93 e1       	ldi	r25, 0x13	; 19
    18d2:	90 93 d4 00 	sts	0x00D4, r25
    18d6:	80 93 d3 00 	sts	0x00D3, r24
	timer1_Strut.interrupt			= TRUE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 d5 00 	sts	0x00D5, r24
	TIMER1_init(&timer1_Strut);
    18e0:	8a ec       	ldi	r24, 0xCA	; 202
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <TIMER1_init>
	Timer1_setCallBack(Timer1_INT);       /* CallBack Function for timer 1 CTC Channel A Interrupt Function */
    18e8:	84 ef       	ldi	r24, 0xF4	; 244
    18ea:	9c e0       	ldi	r25, 0x0C	; 12
    18ec:	0e 94 26 11 	call	0x224c	; 0x224c <Timer1_setCallBack>


    while(1)
    {
    	if (Check_Button() == 1)
    18f0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Check_Button>
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <main+0x80>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a8 e4       	ldi	r26, 0x48	; 72
    18fe:	b3 e4       	ldi	r27, 0x43	; 67
    1900:	8b 87       	std	Y+11, r24	; 0x0b
    1902:	9c 87       	std	Y+12, r25	; 0x0c
    1904:	ad 87       	std	Y+13, r26	; 0x0d
    1906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a e7       	ldi	r20, 0x7A	; 122
    1916:	53 e4       	ldi	r21, 0x43	; 67
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	98 87       	std	Y+8, r25	; 0x08
    1924:	a9 87       	std	Y+9, r26	; 0x09
    1926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <main+0xda>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <main+0x158>
	else if (__tmp > 65535)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <main+0x13a>
    198c:	89 e1       	ldi	r24, 0x19	; 25
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <main+0x128>
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <main+0x11c>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0x164>
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
    	{
    		_delay_ms(200);
            count++;
    19dc:	80 91 c3 00 	lds	r24, 0x00C3
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	80 93 c3 00 	sts	0x00C3, r24
    19e6:	84 cf       	rjmp	.-248    	; 0x18f0 <main+0x80>

000019e8 <Timer1_INT>:
    	}
    }

}
void Timer1_INT(){
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <Timer1_INT+0x6>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

    if (count > 15)
    19f2:	80 91 c3 00 	lds	r24, 0x00C3
    19f6:	80 31       	cpi	r24, 0x10	; 16
    19f8:	00 f1       	brcs	.+64     	; 0x1a3a <Timer1_INT+0x52>
    {
    	LCD_clearScreen(); /* clear the LCD display */
    19fa:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_clearScreen>
    	LCD_displayStringRowColumn(0,2,"press from");
    19fe:	28 e7       	ldi	r18, 0x78	; 120
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	a9 01       	movw	r20, r18
    1a08:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    	LCD_displayStringRowColumn(1,0," ");
    1a0c:	23 e8       	ldi	r18, 0x83	; 131
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    	LCD_intgerToString(1);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_intgerToString>
    	LCD_displayStringRowColumn(1,2,"< press <= ");
    1a22:	25 e8       	ldi	r18, 0x85	; 133
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    	LCD_intgerToString(15);
    1a30:	8f e0       	ldi	r24, 0x0F	; 15
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_intgerToString>
    1a38:	34 c0       	rjmp	.+104    	; 0x1aa2 <Timer1_INT+0xba>
    }
    else if(count < 1)
    1a3a:	80 91 c3 00 	lds	r24, 0x00C3
    1a3e:	88 23       	and	r24, r24
    1a40:	51 f4       	brne	.+20     	; 0x1a56 <Timer1_INT+0x6e>
    {
    	LCD_clearScreen(); /* clear the LCD display */
    1a42:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_clearScreen>
    	LCD_displayStringRowColumn(0,0,"you should press");
    1a46:	21 e9       	ldi	r18, 0x91	; 145
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    1a54:	26 c0       	rjmp	.+76     	; 0x1aa2 <Timer1_INT+0xba>
    }
    else
    {
    	int num = (rand()% (15 - 1 +1))+ 1;
    1a56:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <rand>
    1a5a:	2f e0       	ldi	r18, 0x0F	; 15
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	b9 01       	movw	r22, r18
    1a60:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divmodhi4>
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    	if (count == num)
    1a6a:	80 91 c3 00 	lds	r24, 0x00C3
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	28 17       	cp	r18, r24
    1a78:	39 07       	cpc	r19, r25
    1a7a:	51 f4       	brne	.+20     	; 0x1a90 <Timer1_INT+0xa8>
    	{
        	LCD_clearScreen(); /* clear the LCD display */
    1a7c:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_clearScreen>
        	LCD_displayStringRowColumn(0,2,"you WIN");
    1a80:	22 ea       	ldi	r18, 0xA2	; 162
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	a9 01       	movw	r20, r18
    1a8a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    1a8e:	09 c0       	rjmp	.+18     	; 0x1aa2 <Timer1_INT+0xba>
    	}
    	else
    	{
        	LCD_clearScreen(); /* clear the LCD display */
    1a90:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_clearScreen>
        	LCD_displayStringRowColumn(0,2,"you LOSE");
    1a94:	2a ea       	ldi	r18, 0xAA	; 170
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_displayStringRowColumn>
    	}
    }
	TIMER1_init(&timer1_Strut);
    1aa2:	8a ec       	ldi	r24, 0xCA	; 202
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <TIMER1_init>
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	0f 92       	push	r0
    1abc:	11 24       	eor	r1, r1
    1abe:	2f 93       	push	r18
    1ac0:	3f 93       	push	r19
    1ac2:	4f 93       	push	r20
    1ac4:	5f 93       	push	r21
    1ac6:	6f 93       	push	r22
    1ac8:	7f 93       	push	r23
    1aca:	8f 93       	push	r24
    1acc:	9f 93       	push	r25
    1ace:	af 93       	push	r26
    1ad0:	bf 93       	push	r27
    1ad2:	ef 93       	push	r30
    1ad4:	ff 93       	push	r31
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1ade:	80 91 c4 00 	lds	r24, 0x00C4
    1ae2:	90 91 c5 00 	lds	r25, 0x00C5
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1aea:	e0 91 c4 00 	lds	r30, 0x00C4
    1aee:	f0 91 c5 00 	lds	r31, 0x00C5
    1af2:	09 95       	icall
	}
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1b44:	80 91 c4 00 	lds	r24, 0x00C4
    1b48:	90 91 c5 00 	lds	r25, 0x00C5
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1b50:	e0 91 c4 00 	lds	r30, 0x00C4
    1b54:	f0 91 c5 00 	lds	r31, 0x00C5
    1b58:	09 95       	icall
	}
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	2f 93       	push	r18
    1b8c:	3f 93       	push	r19
    1b8e:	4f 93       	push	r20
    1b90:	5f 93       	push	r21
    1b92:	6f 93       	push	r22
    1b94:	7f 93       	push	r23
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    1b9a:	af 93       	push	r26
    1b9c:	bf 93       	push	r27
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1baa:	80 91 c6 00 	lds	r24, 0x00C6
    1bae:	90 91 c7 00 	lds	r25, 0x00C7
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1bb6:	e0 91 c6 00 	lds	r30, 0x00C6
    1bba:	f0 91 c7 00 	lds	r31, 0x00C7
    1bbe:	09 95       	icall
	}
}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1c10:	80 91 c6 00 	lds	r24, 0x00C6
    1c14:	90 91 c7 00 	lds	r25, 0x00C7
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	29 f0       	breq	.+10     	; 0x1c26 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1c1c:	e0 91 c6 00 	lds	r30, 0x00C6
    1c20:	f0 91 c7 00 	lds	r31, 0x00C7
    1c24:	09 95       	icall
	}
}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	bf 91       	pop	r27
    1c30:	af 91       	pop	r26
    1c32:	9f 91       	pop	r25
    1c34:	8f 91       	pop	r24
    1c36:	7f 91       	pop	r23
    1c38:	6f 91       	pop	r22
    1c3a:	5f 91       	pop	r21
    1c3c:	4f 91       	pop	r20
    1c3e:	3f 91       	pop	r19
    1c40:	2f 91       	pop	r18
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1c4c:	1f 92       	push	r1
    1c4e:	0f 92       	push	r0
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	0f 92       	push	r0
    1c54:	11 24       	eor	r1, r1
    1c56:	2f 93       	push	r18
    1c58:	3f 93       	push	r19
    1c5a:	4f 93       	push	r20
    1c5c:	5f 93       	push	r21
    1c5e:	6f 93       	push	r22
    1c60:	7f 93       	push	r23
    1c62:	8f 93       	push	r24
    1c64:	9f 93       	push	r25
    1c66:	af 93       	push	r26
    1c68:	bf 93       	push	r27
    1c6a:	ef 93       	push	r30
    1c6c:	ff 93       	push	r31
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1c76:	80 91 c6 00 	lds	r24, 0x00C6
    1c7a:	90 91 c7 00 	lds	r25, 0x00C7
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1c82:	e0 91 c6 00 	lds	r30, 0x00C6
    1c86:	f0 91 c7 00 	lds	r31, 0x00C7
    1c8a:	09 95       	icall
	}
}
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	0f 90       	pop	r0
    1cae:	1f 90       	pop	r1
    1cb0:	18 95       	reti

00001cb2 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	4f 93       	push	r20
    1cc2:	5f 93       	push	r21
    1cc4:	6f 93       	push	r22
    1cc6:	7f 93       	push	r23
    1cc8:	8f 93       	push	r24
    1cca:	9f 93       	push	r25
    1ccc:	af 93       	push	r26
    1cce:	bf 93       	push	r27
    1cd0:	ef 93       	push	r30
    1cd2:	ff 93       	push	r31
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1cdc:	80 91 c8 00 	lds	r24, 0x00C8
    1ce0:	90 91 c9 00 	lds	r25, 0x00C9
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	29 f0       	breq	.+10     	; 0x1cf2 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1ce8:	e0 91 c8 00 	lds	r30, 0x00C8
    1cec:	f0 91 c9 00 	lds	r31, 0x00C9
    1cf0:	09 95       	icall
	}
}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	ff 91       	pop	r31
    1cf8:	ef 91       	pop	r30
    1cfa:	bf 91       	pop	r27
    1cfc:	af 91       	pop	r26
    1cfe:	9f 91       	pop	r25
    1d00:	8f 91       	pop	r24
    1d02:	7f 91       	pop	r23
    1d04:	6f 91       	pop	r22
    1d06:	5f 91       	pop	r21
    1d08:	4f 91       	pop	r20
    1d0a:	3f 91       	pop	r19
    1d0c:	2f 91       	pop	r18
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	2f 93       	push	r18
    1d24:	3f 93       	push	r19
    1d26:	4f 93       	push	r20
    1d28:	5f 93       	push	r21
    1d2a:	6f 93       	push	r22
    1d2c:	7f 93       	push	r23
    1d2e:	8f 93       	push	r24
    1d30:	9f 93       	push	r25
    1d32:	af 93       	push	r26
    1d34:	bf 93       	push	r27
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1d42:	80 91 c8 00 	lds	r24, 0x00C8
    1d46:	90 91 c9 00 	lds	r25, 0x00C9
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	29 f0       	breq	.+10     	; 0x1d58 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1d4e:	e0 91 c8 00 	lds	r30, 0x00C8
    1d52:	f0 91 c9 00 	lds	r31, 0x00C9
    1d56:	09 95       	icall
	}
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	bf 91       	pop	r27
    1d62:	af 91       	pop	r26
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	7f 91       	pop	r23
    1d6a:	6f 91       	pop	r22
    1d6c:	5f 91       	pop	r21
    1d6e:	4f 91       	pop	r20
    1d70:	3f 91       	pop	r19
    1d72:	2f 91       	pop	r18
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <TIMER0_init+0x6>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    1d8c:	e3 e5       	ldi	r30, 0x53	; 83
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    1d94:	a2 e5       	ldi	r26, 0x52	; 82
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	85 81       	ldd	r24, Z+5	; 0x05
    1d9e:	96 81       	ldd	r25, Z+6	; 0x06
    1da0:	8c 93       	st	X, r24

	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    1da2:	ac e5       	ldi	r26, 0x5C	; 92
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	87 81       	ldd	r24, Z+7	; 0x07
    1dac:	90 85       	ldd	r25, Z+8	; 0x08
    1dae:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    1db0:	e9 81       	ldd	r30, Y+1	; 0x01
    1db2:	fa 81       	ldd	r31, Y+2	; 0x02
    1db4:	84 81       	ldd	r24, Z+4	; 0x04
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		PORTD_DIR |= (1 << OC0);
    1dba:	a1 e3       	ldi	r26, 0x31	; 49
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e1 e3       	ldi	r30, 0x31	; 49
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 60       	ori	r24, 0x08	; 8
    1dc6:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	81 81       	ldd	r24, Z+1	; 0x01
    1dce:	88 23       	and	r24, r24
    1dd0:	41 f4       	brne	.+16     	; 0x1de2 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    1dd2:	a9 e5       	ldi	r26, 0x59	; 89
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e9 e5       	ldi	r30, 0x59	; 89
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	81 60       	ori	r24, 0x01	; 1
    1dde:	8c 93       	st	X, r24
    1de0:	0c c0       	rjmp	.+24     	; 0x1dfa <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	81 81       	ldd	r24, Z+1	; 0x01
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    1dec:	a9 e5       	ldi	r26, 0x59	; 89
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e9 e5       	ldi	r30, 0x59	; 89
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	82 60       	ori	r24, 0x02	; 2
    1df8:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    1dfa:	a3 e5       	ldi	r26, 0x53	; 83
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e3 e5       	ldi	r30, 0x53	; 83
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	28 2f       	mov	r18, r24
    1e06:	27 7b       	andi	r18, 0xB7	; 183
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	81 81       	ldd	r24, Z+1	; 0x01
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	00 24       	eor	r0, r0
    1e14:	96 95       	lsr	r25
    1e16:	87 95       	ror	r24
    1e18:	07 94       	ror	r0
    1e1a:	96 95       	lsr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	07 94       	ror	r0
    1e20:	98 2f       	mov	r25, r24
    1e22:	80 2d       	mov	r24, r0
    1e24:	88 74       	andi	r24, 0x48	; 72
    1e26:	82 2b       	or	r24, r18
    1e28:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    1e2a:	a3 e5       	ldi	r26, 0x53	; 83
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e3 e5       	ldi	r30, 0x53	; 83
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	28 2f       	mov	r18, r24
    1e36:	2f 7c       	andi	r18, 0xCF	; 207
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	83 70       	andi	r24, 0x03	; 3
    1e44:	90 70       	andi	r25, 0x00	; 0
    1e46:	82 95       	swap	r24
    1e48:	92 95       	swap	r25
    1e4a:	90 7f       	andi	r25, 0xF0	; 240
    1e4c:	98 27       	eor	r25, r24
    1e4e:	80 7f       	andi	r24, 0xF0	; 240
    1e50:	98 27       	eor	r25, r24
    1e52:	82 2b       	or	r24, r18
    1e54:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    1e56:	a3 e5       	ldi	r26, 0x53	; 83
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e3 e5       	ldi	r30, 0x53	; 83
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	98 2f       	mov	r25, r24
    1e62:	98 7f       	andi	r25, 0xF8	; 248
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	80 81       	ld	r24, Z
    1e6a:	87 70       	andi	r24, 0x07	; 7
    1e6c:	89 2b       	or	r24, r25
    1e6e:	8c 93       	st	X, r24
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <TIMER1_init+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    1e88:	ac e4       	ldi	r26, 0x4C	; 76
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	85 81       	ldd	r24, Z+5	; 0x05
    1e92:	96 81       	ldd	r25, Z+6	; 0x06
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	9c 93       	st	X, r25
    1e98:	8e 93       	st	-X, r24

	if( (Config_Ptr->mode ) == NORMAL_MODE )
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	88 23       	and	r24, r24
    1ea2:	91 f4       	brne	.+36     	; 0x1ec8 <TIMER1_init+0x4e>
	{
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    1ea4:	ef e4       	ldi	r30, 0x4F	; 79
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	8c e0       	ldi	r24, 0x0C	; 12
    1eaa:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	83 85       	ldd	r24, Z+11	; 0x0b
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <TIMER1_init+0x3e>
    1eb6:	ea c0       	rjmp	.+468    	; 0x208c <TIMER1_init+0x212>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << TOIE1);
    1eb8:	a9 e5       	ldi	r26, 0x59	; 89
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e9 e5       	ldi	r30, 0x59	; 89
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	84 60       	ori	r24, 0x04	; 4
    1ec4:	8c 93       	st	X, r24
    1ec6:	e2 c0       	rjmp	.+452    	; 0x208c <TIMER1_init+0x212>
		}

	}
	else if((Config_Ptr->mode ) == CTC_MODE){
    1ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ecc:	81 81       	ldd	r24, Z+1	; 0x01
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	d9 f4       	brne	.+54     	; 0x1f08 <TIMER1_init+0x8e>
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    1ed2:	ef e4       	ldi	r30, 0x4F	; 79
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	8c e0       	ldi	r24, 0x0C	; 12
    1ed8:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	83 85       	ldd	r24, Z+11	; 0x0b
    1ee0:	88 23       	and	r24, r24
    1ee2:	39 f0       	breq	.+14     	; 0x1ef2 <TIMER1_init+0x78>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << OCIE1A);
    1ee4:	a9 e5       	ldi	r26, 0x59	; 89
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e9 e5       	ldi	r30, 0x59	; 89
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 61       	ori	r24, 0x10	; 16
    1ef0:	8c 93       	st	X, r24
		}
		OCR1A    = ((Config_Ptr->top_count));
    1ef2:	ea e4       	ldi	r30, 0x4A	; 74
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	a9 81       	ldd	r26, Y+1	; 0x01
    1ef8:	ba 81       	ldd	r27, Y+2	; 0x02
    1efa:	19 96       	adiw	r26, 0x09	; 9
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	1a 97       	sbiw	r26, 0x0a	; 10
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
    1f06:	c2 c0       	rjmp	.+388    	; 0x208c <TIMER1_init+0x212>
//		/* Check for OC1B */
//		else if ((Config_Ptr -> OutputPin) == OC1B){
//			// configure the output pin PD4 in compare mode
//			PORTD_DIR |= (1 << OC1B);
//		}
		if ((Config_Ptr->channel) == CHANNEL_A)
    1f08:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f0e:	88 23       	and	r24, r24
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <TIMER1_init+0x9a>
    1f12:	5d c0       	rjmp	.+186    	; 0x1fce <TIMER1_init+0x154>
		{
			// configure the output pin PD5 in compare mode
				PORTD_DIR |= (1 << OC1A);
    1f14:	a1 e3       	ldi	r26, 0x31	; 49
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 62       	ori	r24, 0x20	; 32
    1f20:	8c 93       	st	X, r24

			/*set compare value for compare mode channel A*/
			OCR1A  = ((Config_Ptr->compare_value));
    1f22:	aa e4       	ldi	r26, 0x4A	; 74
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	87 81       	ldd	r24, Z+7	; 0x07
    1f2c:	90 85       	ldd	r25, Z+8	; 0x08
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	9c 93       	st	X, r25
    1f32:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
    1f34:	a6 e4       	ldi	r26, 0x46	; 70
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3c:	81 85       	ldd	r24, Z+9	; 0x09
    1f3e:	92 85       	ldd	r25, Z+10	; 0x0a
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	9c 93       	st	X, r25
    1f44:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	83 85       	ldd	r24, Z+11	; 0x0b
    1f4c:	88 23       	and	r24, r24
    1f4e:	39 f0       	breq	.+14     	; 0x1f5e <TIMER1_init+0xe4>
				/* Enable interrupt for compare mode channel A */
				TIMSK |= (1 << OCIE1A);
    1f50:	a9 e5       	ldi	r26, 0x59	; 89
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e9 e5       	ldi	r30, 0x59	; 89
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 61       	ori	r24, 0x10	; 16
    1f5c:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel A */
			TCCR1A = ( ( TCCR1A & 0x3F ) | ( (Config_Ptr -> compare_output) << COM1A0) );
    1f5e:	af e4       	ldi	r26, 0x4F	; 79
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ef e4       	ldi	r30, 0x4F	; 79
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	2f 73       	andi	r18, 0x3F	; 63
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	00 24       	eor	r0, r0
    1f78:	96 95       	lsr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	07 94       	ror	r0
    1f7e:	96 95       	lsr	r25
    1f80:	87 95       	ror	r24
    1f82:	07 94       	ror	r0
    1f84:	98 2f       	mov	r25, r24
    1f86:	80 2d       	mov	r24, r0
    1f88:	82 2b       	or	r24, r18
    1f8a:	8c 93       	st	X, r24
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    1f8c:	af e4       	ldi	r26, 0x4F	; 79
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ef e4       	ldi	r30, 0x4F	; 79
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	98 2f       	mov	r25, r24
    1f98:	9c 7f       	andi	r25, 0xFC	; 252
    1f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	89 2b       	or	r24, r25
    1fa2:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    1fa4:	ae e4       	ldi	r26, 0x4E	; 78
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ee e4       	ldi	r30, 0x4E	; 78
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	28 2f       	mov	r18, r24
    1fb0:	27 7e       	andi	r18, 0xE7	; 231
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	81 81       	ldd	r24, Z+1	; 0x01
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	82 2b       	or	r24, r18
    1fca:	8c 93       	st	X, r24
    1fcc:	5f c0       	rjmp	.+190    	; 0x208c <TIMER1_init+0x212>

		}

		else if ( (Config_Ptr->channel) == CHANNEL_B){
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	84 85       	ldd	r24, Z+12	; 0x0c
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <TIMER1_init+0x160>
    1fd8:	59 c0       	rjmp	.+178    	; 0x208c <TIMER1_init+0x212>
			// configure the output pin PD4 in compare mode
			PORTD_DIR |= (1 << OC1B);
    1fda:	a1 e3       	ldi	r26, 0x31	; 49
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e1 e3       	ldi	r30, 0x31	; 49
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 61       	ori	r24, 0x10	; 16
    1fe6:	8c 93       	st	X, r24

			/*set compare value for compare mode channel B*/
			OCR1B  = ((Config_Ptr -> compare_value));
    1fe8:	a8 e4       	ldi	r26, 0x48	; 72
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	87 81       	ldd	r24, Z+7	; 0x07
    1ff2:	90 85       	ldd	r25, Z+8	; 0x08
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
    1ffa:	a6 e4       	ldi	r26, 0x46	; 70
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	81 85       	ldd	r24, Z+9	; 0x09
    2004:	92 85       	ldd	r25, Z+10	; 0x0a
    2006:	11 96       	adiw	r26, 0x01	; 1
    2008:	9c 93       	st	X, r25
    200a:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	83 85       	ldd	r24, Z+11	; 0x0b
    2012:	88 23       	and	r24, r24
    2014:	39 f0       	breq	.+14     	; 0x2024 <TIMER1_init+0x1aa>
				/* Enable interrupt for compare mode channel B */
				TIMSK |= (1 << OCIE1B);
    2016:	a9 e5       	ldi	r26, 0x59	; 89
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e9 e5       	ldi	r30, 0x59	; 89
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 60       	ori	r24, 0x08	; 8
    2022:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel B */
			TCCR1A = ( ( TCCR1A & 0xCF ) | ( (Config_Ptr -> compare_output) << COM1B0) );
    2024:	af e4       	ldi	r26, 0x4F	; 79
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ef e4       	ldi	r30, 0x4F	; 79
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	28 2f       	mov	r18, r24
    2030:	2f 7c       	andi	r18, 0xCF	; 207
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	82 95       	swap	r24
    203e:	92 95       	swap	r25
    2040:	90 7f       	andi	r25, 0xF0	; 240
    2042:	98 27       	eor	r25, r24
    2044:	80 7f       	andi	r24, 0xF0	; 240
    2046:	98 27       	eor	r25, r24
    2048:	82 2b       	or	r24, r18
    204a:	8c 93       	st	X, r24
			/*configure the mode of the timer*/
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    204c:	af e4       	ldi	r26, 0x4F	; 79
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ef e4       	ldi	r30, 0x4F	; 79
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	98 2f       	mov	r25, r24
    2058:	9c 7f       	andi	r25, 0xFC	; 252
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	83 81       	ldd	r24, Z+3	; 0x03
    2060:	89 2b       	or	r24, r25
    2062:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    2064:	ae e4       	ldi	r26, 0x4E	; 78
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ee e4       	ldi	r30, 0x4E	; 78
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	28 2f       	mov	r18, r24
    2070:	27 7e       	andi	r18, 0xE7	; 231
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	81 81       	ldd	r24, Z+1	; 0x01
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	82 2b       	or	r24, r18
    208a:	8c 93       	st	X, r24
		}
	}
	TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    208c:	af e4       	ldi	r26, 0x4F	; 79
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ef e4       	ldi	r30, 0x4F	; 79
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	98 2f       	mov	r25, r24
    2098:	9c 7f       	andi	r25, 0xFC	; 252
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	89 2b       	or	r24, r25
    20a2:	8c 93       	st	X, r24
	TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    20a4:	ae e4       	ldi	r26, 0x4E	; 78
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ee e4       	ldi	r30, 0x4E	; 78
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	28 2f       	mov	r18, r24
    20b0:	27 7e       	andi	r18, 0xE7	; 231
    20b2:	e9 81       	ldd	r30, Y+1	; 0x01
    20b4:	fa 81       	ldd	r31, Y+2	; 0x02
    20b6:	81 81       	ldd	r24, Z+1	; 0x01
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	82 2b       	or	r24, r18
    20ca:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    20cc:	ae e4       	ldi	r26, 0x4E	; 78
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ee e4       	ldi	r30, 0x4E	; 78
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	98 2f       	mov	r25, r24
    20d8:	98 7f       	andi	r25, 0xF8	; 248
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	80 81       	ld	r24, Z
    20e0:	89 2b       	or	r24, r25
    20e2:	8c 93       	st	X, r24
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <TIMER2_init+0x6>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    20fc:	a4 e4       	ldi	r26, 0x44	; 68
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e9 81       	ldd	r30, Y+1	; 0x01
    2102:	fa 81       	ldd	r31, Y+2	; 0x02
    2104:	85 81       	ldd	r24, Z+5	; 0x05
    2106:	96 81       	ldd	r25, Z+6	; 0x06
    2108:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    210a:	a3 e4       	ldi	r26, 0x43	; 67
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	87 81       	ldd	r24, Z+7	; 0x07
    2114:	90 85       	ldd	r25, Z+8	; 0x08
    2116:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    2118:	e5 e4       	ldi	r30, 0x45	; 69
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 e8       	ldi	r24, 0x80	; 128
    211e:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	81 81       	ldd	r24, Z+1	; 0x01
    2126:	88 23       	and	r24, r24
    2128:	41 f4       	brne	.+16     	; 0x213a <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    212a:	a9 e5       	ldi	r26, 0x59	; 89
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 e5       	ldi	r30, 0x59	; 89
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 64       	ori	r24, 0x40	; 64
    2136:	8c 93       	st	X, r24
    2138:	0c c0       	rjmp	.+24     	; 0x2152 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    213a:	e9 81       	ldd	r30, Y+1	; 0x01
    213c:	fa 81       	ldd	r31, Y+2	; 0x02
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	39 f4       	brne	.+14     	; 0x2152 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    2144:	a9 e5       	ldi	r26, 0x59	; 89
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e9 e5       	ldi	r30, 0x59	; 89
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	80 68       	ori	r24, 0x80	; 128
    2150:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    2152:	a5 e4       	ldi	r26, 0x45	; 69
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e4       	ldi	r30, 0x45	; 69
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	28 2f       	mov	r18, r24
    215e:	27 7b       	andi	r18, 0xB7	; 183
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	81 81       	ldd	r24, Z+1	; 0x01
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	88 74       	andi	r24, 0x48	; 72
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	00 24       	eor	r0, r0
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	07 94       	ror	r0
    2176:	96 95       	lsr	r25
    2178:	87 95       	ror	r24
    217a:	07 94       	ror	r0
    217c:	98 2f       	mov	r25, r24
    217e:	80 2d       	mov	r24, r0
    2180:	82 2b       	or	r24, r18
    2182:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    2184:	a5 e4       	ldi	r26, 0x45	; 69
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e5 e4       	ldi	r30, 0x45	; 69
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	28 2f       	mov	r18, r24
    2190:	2f 7c       	andi	r18, 0xCF	; 207
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	83 70       	andi	r24, 0x03	; 3
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	82 95       	swap	r24
    21a2:	92 95       	swap	r25
    21a4:	90 7f       	andi	r25, 0xF0	; 240
    21a6:	98 27       	eor	r25, r24
    21a8:	80 7f       	andi	r24, 0xF0	; 240
    21aa:	98 27       	eor	r25, r24
    21ac:	82 2b       	or	r24, r18
    21ae:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    21b0:	a5 e4       	ldi	r26, 0x45	; 69
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e5 e4       	ldi	r30, 0x45	; 69
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	98 2f       	mov	r25, r24
    21bc:	98 7f       	andi	r25, 0xF8	; 248
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	80 81       	ld	r24, Z
    21c4:	87 70       	andi	r24, 0x07	; 7
    21c6:	89 2b       	or	r24, r25
    21c8:	8c 93       	st	X, r24
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <Timer0_Stop>:

void Timer0_Stop()
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    21dc:	a3 e5       	ldi	r26, 0x53	; 83
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	88 7f       	andi	r24, 0xF8	; 248
    21e8:	8c 93       	st	X, r24
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <Timer1_Stop>:

void Timer1_Stop(){
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    21f8:	ae e4       	ldi	r26, 0x4E	; 78
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ee e4       	ldi	r30, 0x4E	; 78
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 7f       	andi	r24, 0xF8	; 248
    2204:	8c 93       	st	X, r24
}
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <Timer2_Stop>:

void Timer2_Stop(){
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    2214:	a5 e4       	ldi	r26, 0x45	; 69
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e5 e4       	ldi	r30, 0x45	; 69
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	88 7f       	andi	r24, 0xF8	; 248
    2220:	8c 93       	st	X, r24
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <Timer0_setCallBack+0x6>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	90 93 c5 00 	sts	0x00C5, r25
    223e:	80 93 c4 00 	sts	0x00C4, r24
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <Timer1_setCallBack+0x6>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	9a 83       	std	Y+2, r25	; 0x02
    2258:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	90 93 c7 00 	sts	0x00C7, r25
    2262:	80 93 c6 00 	sts	0x00C6, r24
}
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <Timer2_setCallBack+0x6>
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	90 93 c9 00 	sts	0x00C9, r25
    2286:	80 93 c8 00 	sts	0x00C8, r24
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <__divmodhi4>:
    2294:	97 fb       	bst	r25, 7
    2296:	09 2e       	mov	r0, r25
    2298:	07 26       	eor	r0, r23
    229a:	0a d0       	rcall	.+20     	; 0x22b0 <__divmodhi4_neg1>
    229c:	77 fd       	sbrc	r23, 7
    229e:	04 d0       	rcall	.+8      	; 0x22a8 <__divmodhi4_neg2>
    22a0:	0c d0       	rcall	.+24     	; 0x22ba <__udivmodhi4>
    22a2:	06 d0       	rcall	.+12     	; 0x22b0 <__divmodhi4_neg1>
    22a4:	00 20       	and	r0, r0
    22a6:	1a f4       	brpl	.+6      	; 0x22ae <__divmodhi4_exit>

000022a8 <__divmodhi4_neg2>:
    22a8:	70 95       	com	r23
    22aa:	61 95       	neg	r22
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255

000022ae <__divmodhi4_exit>:
    22ae:	08 95       	ret

000022b0 <__divmodhi4_neg1>:
    22b0:	f6 f7       	brtc	.-4      	; 0x22ae <__divmodhi4_exit>
    22b2:	90 95       	com	r25
    22b4:	81 95       	neg	r24
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	08 95       	ret

000022ba <__udivmodhi4>:
    22ba:	aa 1b       	sub	r26, r26
    22bc:	bb 1b       	sub	r27, r27
    22be:	51 e1       	ldi	r21, 0x11	; 17
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <__udivmodhi4_ep>

000022c2 <__udivmodhi4_loop>:
    22c2:	aa 1f       	adc	r26, r26
    22c4:	bb 1f       	adc	r27, r27
    22c6:	a6 17       	cp	r26, r22
    22c8:	b7 07       	cpc	r27, r23
    22ca:	10 f0       	brcs	.+4      	; 0x22d0 <__udivmodhi4_ep>
    22cc:	a6 1b       	sub	r26, r22
    22ce:	b7 0b       	sbc	r27, r23

000022d0 <__udivmodhi4_ep>:
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	5a 95       	dec	r21
    22d6:	a9 f7       	brne	.-22     	; 0x22c2 <__udivmodhi4_loop>
    22d8:	80 95       	com	r24
    22da:	90 95       	com	r25
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	08 95       	ret

000022e2 <__prologue_saves__>:
    22e2:	2f 92       	push	r2
    22e4:	3f 92       	push	r3
    22e6:	4f 92       	push	r4
    22e8:	5f 92       	push	r5
    22ea:	6f 92       	push	r6
    22ec:	7f 92       	push	r7
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	ca 1b       	sub	r28, r26
    230c:	db 0b       	sbc	r29, r27
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	09 94       	ijmp

0000231a <__epilogue_restores__>:
    231a:	2a 88       	ldd	r2, Y+18	; 0x12
    231c:	39 88       	ldd	r3, Y+17	; 0x11
    231e:	48 88       	ldd	r4, Y+16	; 0x10
    2320:	5f 84       	ldd	r5, Y+15	; 0x0f
    2322:	6e 84       	ldd	r6, Y+14	; 0x0e
    2324:	7d 84       	ldd	r7, Y+13	; 0x0d
    2326:	8c 84       	ldd	r8, Y+12	; 0x0c
    2328:	9b 84       	ldd	r9, Y+11	; 0x0b
    232a:	aa 84       	ldd	r10, Y+10	; 0x0a
    232c:	b9 84       	ldd	r11, Y+9	; 0x09
    232e:	c8 84       	ldd	r12, Y+8	; 0x08
    2330:	df 80       	ldd	r13, Y+7	; 0x07
    2332:	ee 80       	ldd	r14, Y+6	; 0x06
    2334:	fd 80       	ldd	r15, Y+5	; 0x05
    2336:	0c 81       	ldd	r16, Y+4	; 0x04
    2338:	1b 81       	ldd	r17, Y+3	; 0x03
    233a:	aa 81       	ldd	r26, Y+2	; 0x02
    233c:	b9 81       	ldd	r27, Y+1	; 0x01
    233e:	ce 0f       	add	r28, r30
    2340:	d1 1d       	adc	r29, r1
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	ed 01       	movw	r28, r26
    234e:	08 95       	ret

00002350 <do_rand>:
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ee ea       	ldi	r30, 0xAE	; 174
    2356:	f1 e1       	ldi	r31, 0x11	; 17
    2358:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__+0x10>
    235c:	ec 01       	movw	r28, r24
    235e:	a8 80       	ld	r10, Y
    2360:	b9 80       	ldd	r11, Y+1	; 0x01
    2362:	ca 80       	ldd	r12, Y+2	; 0x02
    2364:	db 80       	ldd	r13, Y+3	; 0x03
    2366:	a1 14       	cp	r10, r1
    2368:	b1 04       	cpc	r11, r1
    236a:	c1 04       	cpc	r12, r1
    236c:	d1 04       	cpc	r13, r1
    236e:	41 f4       	brne	.+16     	; 0x2380 <do_rand+0x30>
    2370:	84 e2       	ldi	r24, 0x24	; 36
    2372:	a8 2e       	mov	r10, r24
    2374:	89 ed       	ldi	r24, 0xD9	; 217
    2376:	b8 2e       	mov	r11, r24
    2378:	8b e5       	ldi	r24, 0x5B	; 91
    237a:	c8 2e       	mov	r12, r24
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	d8 2e       	mov	r13, r24
    2380:	c6 01       	movw	r24, r12
    2382:	b5 01       	movw	r22, r10
    2384:	2d e1       	ldi	r18, 0x1D	; 29
    2386:	33 ef       	ldi	r19, 0xF3	; 243
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__divmodsi4>
    2390:	27 ea       	ldi	r18, 0xA7	; 167
    2392:	31 e4       	ldi	r19, 0x41	; 65
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    239c:	7b 01       	movw	r14, r22
    239e:	8c 01       	movw	r16, r24
    23a0:	c6 01       	movw	r24, r12
    23a2:	b5 01       	movw	r22, r10
    23a4:	2d e1       	ldi	r18, 0x1D	; 29
    23a6:	33 ef       	ldi	r19, 0xF3	; 243
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__divmodsi4>
    23b0:	ca 01       	movw	r24, r20
    23b2:	b9 01       	movw	r22, r18
    23b4:	2c ee       	ldi	r18, 0xEC	; 236
    23b6:	34 ef       	ldi	r19, 0xF4	; 244
    23b8:	4f ef       	ldi	r20, 0xFF	; 255
    23ba:	5f ef       	ldi	r21, 0xFF	; 255
    23bc:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    23c0:	6e 0d       	add	r22, r14
    23c2:	7f 1d       	adc	r23, r15
    23c4:	80 1f       	adc	r24, r16
    23c6:	91 1f       	adc	r25, r17
    23c8:	97 ff       	sbrs	r25, 7
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <do_rand+0x84>
    23cc:	61 50       	subi	r22, 0x01	; 1
    23ce:	70 40       	sbci	r23, 0x00	; 0
    23d0:	80 40       	sbci	r24, 0x00	; 0
    23d2:	90 48       	sbci	r25, 0x80	; 128
    23d4:	68 83       	st	Y, r22
    23d6:	79 83       	std	Y+1, r23	; 0x01
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	9b 01       	movw	r18, r22
    23de:	3f 77       	andi	r19, 0x7F	; 127
    23e0:	c9 01       	movw	r24, r18
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	ea e0       	ldi	r30, 0x0A	; 10
    23e8:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__+0x10>

000023ec <rand_r>:
    23ec:	0e 94 a8 11 	call	0x2350	; 0x2350 <do_rand>
    23f0:	08 95       	ret

000023f2 <rand>:
    23f2:	8b eb       	ldi	r24, 0xBB	; 187
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 a8 11 	call	0x2350	; 0x2350 <do_rand>
    23fa:	08 95       	ret

000023fc <srand>:
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	80 93 bb 00 	sts	0x00BB, r24
    2404:	90 93 bc 00 	sts	0x00BC, r25
    2408:	a0 93 bd 00 	sts	0x00BD, r26
    240c:	b0 93 be 00 	sts	0x00BE, r27
    2410:	08 95       	ret

00002412 <itoa>:
    2412:	fb 01       	movw	r30, r22
    2414:	9f 01       	movw	r18, r30
    2416:	e8 94       	clt
    2418:	42 30       	cpi	r20, 0x02	; 2
    241a:	c4 f0       	brlt	.+48     	; 0x244c <itoa+0x3a>
    241c:	45 32       	cpi	r20, 0x25	; 37
    241e:	b4 f4       	brge	.+44     	; 0x244c <itoa+0x3a>
    2420:	4a 30       	cpi	r20, 0x0A	; 10
    2422:	29 f4       	brne	.+10     	; 0x242e <itoa+0x1c>
    2424:	97 fb       	bst	r25, 7
    2426:	1e f4       	brtc	.+6      	; 0x242e <itoa+0x1c>
    2428:	90 95       	com	r25
    242a:	81 95       	neg	r24
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	64 2f       	mov	r22, r20
    2430:	77 27       	eor	r23, r23
    2432:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
    2436:	80 5d       	subi	r24, 0xD0	; 208
    2438:	8a 33       	cpi	r24, 0x3A	; 58
    243a:	0c f0       	brlt	.+2      	; 0x243e <itoa+0x2c>
    243c:	89 5d       	subi	r24, 0xD9	; 217
    243e:	81 93       	st	Z+, r24
    2440:	cb 01       	movw	r24, r22
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	a1 f7       	brne	.-24     	; 0x242e <itoa+0x1c>
    2446:	16 f4       	brtc	.+4      	; 0x244c <itoa+0x3a>
    2448:	5d e2       	ldi	r21, 0x2D	; 45
    244a:	51 93       	st	Z+, r21
    244c:	10 82       	st	Z, r1
    244e:	c9 01       	movw	r24, r18
    2450:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <strrev>

00002454 <strrev>:
    2454:	dc 01       	movw	r26, r24
    2456:	fc 01       	movw	r30, r24
    2458:	67 2f       	mov	r22, r23
    245a:	71 91       	ld	r23, Z+
    245c:	77 23       	and	r23, r23
    245e:	e1 f7       	brne	.-8      	; 0x2458 <strrev+0x4>
    2460:	32 97       	sbiw	r30, 0x02	; 2
    2462:	04 c0       	rjmp	.+8      	; 0x246c <strrev+0x18>
    2464:	7c 91       	ld	r23, X
    2466:	6d 93       	st	X+, r22
    2468:	70 83       	st	Z, r23
    246a:	62 91       	ld	r22, -Z
    246c:	ae 17       	cp	r26, r30
    246e:	bf 07       	cpc	r27, r31
    2470:	c8 f3       	brcs	.-14     	; 0x2464 <strrev+0x10>
    2472:	08 95       	ret

00002474 <__mulsi3>:
    2474:	62 9f       	mul	r22, r18
    2476:	d0 01       	movw	r26, r0
    2478:	73 9f       	mul	r23, r19
    247a:	f0 01       	movw	r30, r0
    247c:	82 9f       	mul	r24, r18
    247e:	e0 0d       	add	r30, r0
    2480:	f1 1d       	adc	r31, r1
    2482:	64 9f       	mul	r22, r20
    2484:	e0 0d       	add	r30, r0
    2486:	f1 1d       	adc	r31, r1
    2488:	92 9f       	mul	r25, r18
    248a:	f0 0d       	add	r31, r0
    248c:	83 9f       	mul	r24, r19
    248e:	f0 0d       	add	r31, r0
    2490:	74 9f       	mul	r23, r20
    2492:	f0 0d       	add	r31, r0
    2494:	65 9f       	mul	r22, r21
    2496:	f0 0d       	add	r31, r0
    2498:	99 27       	eor	r25, r25
    249a:	72 9f       	mul	r23, r18
    249c:	b0 0d       	add	r27, r0
    249e:	e1 1d       	adc	r30, r1
    24a0:	f9 1f       	adc	r31, r25
    24a2:	63 9f       	mul	r22, r19
    24a4:	b0 0d       	add	r27, r0
    24a6:	e1 1d       	adc	r30, r1
    24a8:	f9 1f       	adc	r31, r25
    24aa:	bd 01       	movw	r22, r26
    24ac:	cf 01       	movw	r24, r30
    24ae:	11 24       	eor	r1, r1
    24b0:	08 95       	ret

000024b2 <__divmodsi4>:
    24b2:	97 fb       	bst	r25, 7
    24b4:	09 2e       	mov	r0, r25
    24b6:	05 26       	eor	r0, r21
    24b8:	0e d0       	rcall	.+28     	; 0x24d6 <__divmodsi4_neg1>
    24ba:	57 fd       	sbrc	r21, 7
    24bc:	04 d0       	rcall	.+8      	; 0x24c6 <__divmodsi4_neg2>
    24be:	14 d0       	rcall	.+40     	; 0x24e8 <__udivmodsi4>
    24c0:	0a d0       	rcall	.+20     	; 0x24d6 <__divmodsi4_neg1>
    24c2:	00 1c       	adc	r0, r0
    24c4:	38 f4       	brcc	.+14     	; 0x24d4 <__divmodsi4_exit>

000024c6 <__divmodsi4_neg2>:
    24c6:	50 95       	com	r21
    24c8:	40 95       	com	r20
    24ca:	30 95       	com	r19
    24cc:	21 95       	neg	r18
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	4f 4f       	sbci	r20, 0xFF	; 255
    24d2:	5f 4f       	sbci	r21, 0xFF	; 255

000024d4 <__divmodsi4_exit>:
    24d4:	08 95       	ret

000024d6 <__divmodsi4_neg1>:
    24d6:	f6 f7       	brtc	.-4      	; 0x24d4 <__divmodsi4_exit>
    24d8:	90 95       	com	r25
    24da:	80 95       	com	r24
    24dc:	70 95       	com	r23
    24de:	61 95       	neg	r22
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	8f 4f       	sbci	r24, 0xFF	; 255
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	08 95       	ret

000024e8 <__udivmodsi4>:
    24e8:	a1 e2       	ldi	r26, 0x21	; 33
    24ea:	1a 2e       	mov	r1, r26
    24ec:	aa 1b       	sub	r26, r26
    24ee:	bb 1b       	sub	r27, r27
    24f0:	fd 01       	movw	r30, r26
    24f2:	0d c0       	rjmp	.+26     	; 0x250e <__udivmodsi4_ep>

000024f4 <__udivmodsi4_loop>:
    24f4:	aa 1f       	adc	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	ee 1f       	adc	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	a2 17       	cp	r26, r18
    24fe:	b3 07       	cpc	r27, r19
    2500:	e4 07       	cpc	r30, r20
    2502:	f5 07       	cpc	r31, r21
    2504:	20 f0       	brcs	.+8      	; 0x250e <__udivmodsi4_ep>
    2506:	a2 1b       	sub	r26, r18
    2508:	b3 0b       	sbc	r27, r19
    250a:	e4 0b       	sbc	r30, r20
    250c:	f5 0b       	sbc	r31, r21

0000250e <__udivmodsi4_ep>:
    250e:	66 1f       	adc	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	1a 94       	dec	r1
    2518:	69 f7       	brne	.-38     	; 0x24f4 <__udivmodsi4_loop>
    251a:	60 95       	com	r22
    251c:	70 95       	com	r23
    251e:	80 95       	com	r24
    2520:	90 95       	com	r25
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	bd 01       	movw	r22, r26
    2528:	cf 01       	movw	r24, r30
    252a:	08 95       	ret

0000252c <_exit>:
    252c:	f8 94       	cli

0000252e <__stop_program>:
    252e:	ff cf       	rjmp	.-2      	; 0x252e <__stop_program>

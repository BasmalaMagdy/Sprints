
guess_game_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002698  0000272c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c0  008000c0  0000278c  2**0
                  ALLOC
  3 .stab         0000201c  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001205  00000000  00000000  000047a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000078a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008791  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009540  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000992d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a0fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_3>
      10:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__vector_6>
      1c:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_7>
      20:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__vector_8>
      24:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <main>
      8a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 12 	jmp	0x244a	; 0x244a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 12 	jmp	0x244a	; 0x244a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void){
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <Port_Init>:


/************************************************************************
  	  	  	  	  	  	  	  Function Definitions
 ***********************************************************************/
void Port_Init(PORT_Config_t * Port){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <Port_Init+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <Port_Init+0x8>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	82 81       	ldd	r24, Z+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 83       	std	Y+4, r19	; 0x04
     d5e:	2b 83       	std	Y+3, r18	; 0x03
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	f1 f0       	breq	.+60     	; 0xda6 <Port_Init+0x64>
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	2c f4       	brge	.+10     	; 0xd7e <Port_Init+0x3c>
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	61 f0       	breq	.+24     	; 0xd94 <Port_Init+0x52>
     d7c:	2e c0       	rjmp	.+92     	; 0xdda <Port_Init+0x98>
     d7e:	2b 81       	ldd	r18, Y+3	; 0x03
     d80:	3c 81       	ldd	r19, Y+4	; 0x04
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	c1 f0       	breq	.+48     	; 0xdb8 <Port_Init+0x76>
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	e1 f0       	breq	.+56     	; 0xdca <Port_Init+0x88>
     d92:	23 c0       	rjmp	.+70     	; 0xdda <Port_Init+0x98>
	case A:
		PORTA_DIR = Port->direction;
     d94:	ea e3       	ldi	r30, 0x3A	; 58
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	a9 81       	ldd	r26, Y+1	; 0x01
     d9a:	ba 81       	ldd	r27, Y+2	; 0x02
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	8c 91       	ld	r24, X
     da0:	11 97       	sbiw	r26, 0x01	; 1
     da2:	80 83       	st	Z, r24
     da4:	1a c0       	rjmp	.+52     	; 0xdda <Port_Init+0x98>
		break;
	case B:
		PORTB_DIR = Port->direction;
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	a9 81       	ldd	r26, Y+1	; 0x01
     dac:	ba 81       	ldd	r27, Y+2	; 0x02
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	8c 91       	ld	r24, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	80 83       	st	Z, r24
     db6:	11 c0       	rjmp	.+34     	; 0xdda <Port_Init+0x98>
		break;
	case C:
		PORTC_DIR = Port->direction;
     db8:	e4 e3       	ldi	r30, 0x34	; 52
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	a9 81       	ldd	r26, Y+1	; 0x01
     dbe:	ba 81       	ldd	r27, Y+2	; 0x02
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	8c 91       	ld	r24, X
     dc4:	11 97       	sbiw	r26, 0x01	; 1
     dc6:	80 83       	st	Z, r24
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <Port_Init+0x98>
		break;
	case D:
		PORTD_DIR = Port->direction;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	a9 81       	ldd	r26, Y+1	; 0x01
     dd0:	ba 81       	ldd	r27, Y+2	; 0x02
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	8c 91       	ld	r24, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	80 83       	st	Z, r24
		break;
	}
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <Write_Port>:

void Write_Port(PORT_Config_t *Port){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <Write_Port+0x6>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <Write_Port+0x8>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
     df8:	e9 81       	ldd	r30, Y+1	; 0x01
     dfa:	fa 81       	ldd	r31, Y+2	; 0x02
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 83       	std	Y+4, r19	; 0x04
     e04:	2b 83       	std	Y+3, r18	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	e1 f0       	breq	.+56     	; 0xe48 <Write_Port+0x60>
     e10:	2b 81       	ldd	r18, Y+3	; 0x03
     e12:	3c 81       	ldd	r19, Y+4	; 0x04
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	31 05       	cpc	r19, r1
     e18:	2c f4       	brge	.+10     	; 0xe24 <Write_Port+0x3c>
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	61 f0       	breq	.+24     	; 0xe3a <Write_Port+0x52>
     e22:	26 c0       	rjmp	.+76     	; 0xe70 <Write_Port+0x88>
     e24:	2b 81       	ldd	r18, Y+3	; 0x03
     e26:	3c 81       	ldd	r19, Y+4	; 0x04
     e28:	22 30       	cpi	r18, 0x02	; 2
     e2a:	31 05       	cpc	r19, r1
     e2c:	a1 f0       	breq	.+40     	; 0xe56 <Write_Port+0x6e>
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	91 05       	cpc	r25, r1
     e36:	b1 f0       	breq	.+44     	; 0xe64 <Write_Port+0x7c>
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <Write_Port+0x88>
	case A:
		PORTA_OUT = Port->Data;
     e3a:	eb e3       	ldi	r30, 0x3B	; 59
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	a9 81       	ldd	r26, Y+1	; 0x01
     e40:	ba 81       	ldd	r27, Y+2	; 0x02
     e42:	8c 91       	ld	r24, X
     e44:	80 83       	st	Z, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <Write_Port+0x88>
		break;
	case B:
		PORTB_OUT = Port->Data;
     e48:	e8 e3       	ldi	r30, 0x38	; 56
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	a9 81       	ldd	r26, Y+1	; 0x01
     e4e:	ba 81       	ldd	r27, Y+2	; 0x02
     e50:	8c 91       	ld	r24, X
     e52:	80 83       	st	Z, r24
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <Write_Port+0x88>
		break;
	case C:
		PORTC_OUT = Port->Data;
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	a9 81       	ldd	r26, Y+1	; 0x01
     e5c:	ba 81       	ldd	r27, Y+2	; 0x02
     e5e:	8c 91       	ld	r24, X
     e60:	80 83       	st	Z, r24
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <Write_Port+0x88>
		break;
	case D:
		PORTD_OUT = Port->Data;
     e64:	e2 e3       	ldi	r30, 0x32	; 50
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	a9 81       	ldd	r26, Y+1	; 0x01
     e6a:	ba 81       	ldd	r27, Y+2	; 0x02
     e6c:	8c 91       	ld	r24, X
     e6e:	80 83       	st	Z, r24
		break;
	}
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <Write_Pin>:

void Write_Pin(PORT_t port, uint8_t pin, uint8_t Data){
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <Write_Pin+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <Write_Pin+0x8>
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	6a 83       	std	Y+2, r22	; 0x02
     e90:	4b 83       	std	Y+3, r20	; 0x03
	switch(port){
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	3d 83       	std	Y+5, r19	; 0x05
     e9a:	2c 83       	std	Y+4, r18	; 0x04
     e9c:	6c 81       	ldd	r22, Y+4	; 0x04
     e9e:	7d 81       	ldd	r23, Y+5	; 0x05
     ea0:	61 30       	cpi	r22, 0x01	; 1
     ea2:	71 05       	cpc	r23, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <Write_Pin+0x2a>
     ea6:	3d c0       	rjmp	.+122    	; 0xf22 <Write_Pin+0xa4>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	34 f4       	brge	.+12     	; 0xebe <Write_Pin+0x40>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	21 15       	cp	r18, r1
     eb8:	31 05       	cpc	r19, r1
     eba:	71 f0       	breq	.+28     	; 0xed8 <Write_Pin+0x5a>
     ebc:	a0 c0       	rjmp	.+320    	; 0xffe <Write_Pin+0x180>
     ebe:	6c 81       	ldd	r22, Y+4	; 0x04
     ec0:	7d 81       	ldd	r23, Y+5	; 0x05
     ec2:	62 30       	cpi	r22, 0x02	; 2
     ec4:	71 05       	cpc	r23, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <Write_Pin+0x4c>
     ec8:	51 c0       	rjmp	.+162    	; 0xf6c <Write_Pin+0xee>
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <Write_Pin+0x58>
     ed4:	70 c0       	rjmp	.+224    	; 0xfb6 <Write_Pin+0x138>
     ed6:	93 c0       	rjmp	.+294    	; 0xffe <Write_Pin+0x180>
	case A:
		PORTA_OUT = (PORTA_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <Write_Pin+0x76>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	2a 95       	dec	r18
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <Write_Pin+0x72>
     ef8:	80 95       	com	r24
     efa:	48 23       	and	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 01       	movw	r18, r24
     f04:	21 70       	andi	r18, 0x01	; 1
     f06:	30 70       	andi	r19, 0x00	; 0
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	b9 01       	movw	r22, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <Write_Pin+0x98>
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	8a 95       	dec	r24
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <Write_Pin+0x94>
     f1a:	cb 01       	movw	r24, r22
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	6e c0       	rjmp	.+220    	; 0xffe <Write_Pin+0x180>
		break;
	case B:
		PORTB_OUT = (PORTB_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     f22:	a8 e3       	ldi	r26, 0x38	; 56
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e8 e3       	ldi	r30, 0x38	; 56
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <Write_Pin+0xc0>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	2a 95       	dec	r18
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <Write_Pin+0xbc>
     f42:	80 95       	com	r24
     f44:	48 23       	and	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9c 01       	movw	r18, r24
     f4e:	21 70       	andi	r18, 0x01	; 1
     f50:	30 70       	andi	r19, 0x00	; 0
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	b9 01       	movw	r22, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <Write_Pin+0xe2>
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <Write_Pin+0xde>
     f64:	cb 01       	movw	r24, r22
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	49 c0       	rjmp	.+146    	; 0xffe <Write_Pin+0x180>
		break;
	case C:
		PORTC_OUT = (PORTC_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     f6c:	a5 e3       	ldi	r26, 0x35	; 53
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <Write_Pin+0x10a>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	2a 95       	dec	r18
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <Write_Pin+0x106>
     f8c:	80 95       	com	r24
     f8e:	48 23       	and	r20, r24
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9c 01       	movw	r18, r24
     f98:	21 70       	andi	r18, 0x01	; 1
     f9a:	30 70       	andi	r19, 0x00	; 0
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	b9 01       	movw	r22, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <Write_Pin+0x12c>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <Write_Pin+0x128>
     fae:	cb 01       	movw	r24, r22
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	24 c0       	rjmp	.+72     	; 0xffe <Write_Pin+0x180>
		break;
	case D:
		PORTD_OUT = (PORTD_OUT & (~(1<<pin))) | ((Data & 0x01) <<pin);
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <Write_Pin+0x154>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	2a 95       	dec	r18
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <Write_Pin+0x150>
     fd6:	80 95       	com	r24
     fd8:	48 23       	and	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 01       	movw	r18, r24
     fe2:	21 70       	andi	r18, 0x01	; 1
     fe4:	30 70       	andi	r19, 0x00	; 0
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b9 01       	movw	r22, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <Write_Pin+0x176>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	8a 95       	dec	r24
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <Write_Pin+0x172>
     ff8:	cb 01       	movw	r24, r22
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
		break;
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <Read_Port>:

void Read_Port(PORT_Config_t *Port){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <Read_Port+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <Read_Port+0x8>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
	switch(Port->port){
    101e:	e9 81       	ldd	r30, Y+1	; 0x01
    1020:	fa 81       	ldd	r31, Y+2	; 0x02
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3c 83       	std	Y+4, r19	; 0x04
    102a:	2b 83       	std	Y+3, r18	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	e1 f0       	breq	.+56     	; 0x106e <Read_Port+0x60>
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <Read_Port+0x3c>
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <Read_Port+0x52>
    1048:	26 c0       	rjmp	.+76     	; 0x1096 <Read_Port+0x88>
    104a:	2b 81       	ldd	r18, Y+3	; 0x03
    104c:	3c 81       	ldd	r19, Y+4	; 0x04
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	a1 f0       	breq	.+40     	; 0x107c <Read_Port+0x6e>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	b1 f0       	breq	.+44     	; 0x108a <Read_Port+0x7c>
    105e:	1b c0       	rjmp	.+54     	; 0x1096 <Read_Port+0x88>
	case A:
		Port->Data= PORTA_IN;
    1060:	e9 e3       	ldi	r30, 0x39	; 57
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	e9 81       	ldd	r30, Y+1	; 0x01
    1068:	fa 81       	ldd	r31, Y+2	; 0x02
    106a:	80 83       	st	Z, r24
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <Read_Port+0x88>
		break;
	case B:
		Port->Data= PORTB_IN;
    106e:	e6 e3       	ldi	r30, 0x36	; 54
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <Read_Port+0x88>
		break;
	case C:
		Port->Data= PORTC_IN;
    107c:	e3 e3       	ldi	r30, 0x33	; 51
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <Read_Port+0x88>
		break;
	case D:
		Port->Data= PORTD_IN;
    108a:	e0 e3       	ldi	r30, 0x30	; 48
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	e9 81       	ldd	r30, Y+1	; 0x01
    1092:	fa 81       	ldd	r31, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
		break;
	}
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    10ac:	e4 e3       	ldi	r30, 0x34	; 52
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    10b4:	a1 e3       	ldi	r26, 0x31	; 49
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e1 e3       	ldi	r30, 0x31	; 49
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 67       	ori	r24, 0x70	; 112
    10c0:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    10c2:	88 e3       	ldi	r24, 0x38	; 56
    10c4:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    10c8:	8c e0       	ldi	r24, 0x0C	; 12
    10ca:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	e9 97       	sbiw	r28, 0x39	; 57
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    10f0:	a2 e3       	ldi	r26, 0x32	; 50
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e2 e3       	ldi	r30, 0x32	; 50
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7e       	andi	r24, 0xEF	; 239
    10fc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	8c 93       	st	X, r24
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e8       	ldi	r26, 0x80	; 128
    1112:	bf e3       	ldi	r27, 0x3F	; 63
    1114:	8d ab       	std	Y+53, r24	; 0x35
    1116:	9e ab       	std	Y+54, r25	; 0x36
    1118:	af ab       	std	Y+55, r26	; 0x37
    111a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6d a9       	ldd	r22, Y+53	; 0x35
    111e:	7e a9       	ldd	r23, Y+54	; 0x36
    1120:	8f a9       	ldd	r24, Y+55	; 0x37
    1122:	98 ad       	ldd	r25, Y+56	; 0x38
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a e7       	ldi	r20, 0x7A	; 122
    112a:	53 e4       	ldi	r21, 0x43	; 67
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	89 ab       	std	Y+49, r24	; 0x31
    1136:	9a ab       	std	Y+50, r25	; 0x32
    1138:	ab ab       	std	Y+51, r26	; 0x33
    113a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    113c:	69 a9       	ldd	r22, Y+49	; 0x31
    113e:	7a a9       	ldd	r23, Y+50	; 0x32
    1140:	8b a9       	ldd	r24, Y+51	; 0x33
    1142:	9c a9       	ldd	r25, Y+52	; 0x34
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <LCD_sendCommand+0x84>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	98 ab       	std	Y+48, r25	; 0x30
    115a:	8f a7       	std	Y+47, r24	; 0x2f
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    115e:	69 a9       	ldd	r22, Y+49	; 0x31
    1160:	7a a9       	ldd	r23, Y+50	; 0x32
    1162:	8b a9       	ldd	r24, Y+51	; 0x33
    1164:	9c a9       	ldd	r25, Y+52	; 0x34
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6d a9       	ldd	r22, Y+53	; 0x35
    1178:	7e a9       	ldd	r23, Y+54	; 0x36
    117a:	8f a9       	ldd	r24, Y+55	; 0x37
    117c:	98 ad       	ldd	r25, Y+56	; 0x38
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	98 ab       	std	Y+48, r25	; 0x30
    119c:	8f a7       	std	Y+47, r24	; 0x2f
    119e:	0f c0       	rjmp	.+30     	; 0x11be <LCD_sendCommand+0xe4>
    11a0:	89 e1       	ldi	r24, 0x19	; 25
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <LCD_sendCommand+0xd2>
    11b0:	9e a7       	std	Y+46, r25	; 0x2e
    11b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b6:	98 a9       	ldd	r25, Y+48	; 0x30
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	98 ab       	std	Y+48, r25	; 0x30
    11bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c0:	98 a9       	ldd	r25, Y+48	; 0x30
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <LCD_sendCommand+0xc6>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ca:	7a a9       	ldd	r23, Y+50	; 0x32
    11cc:	8b a9       	ldd	r24, Y+51	; 0x33
    11ce:	9c a9       	ldd	r25, Y+52	; 0x34
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	98 ab       	std	Y+48, r25	; 0x30
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11de:	98 a9       	ldd	r25, Y+48	; 0x30
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
    11e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_sendCommand+0x10e>
    11ec:	9c a7       	std	Y+44, r25	; 0x2c
    11ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    11f0:	a2 e3       	ldi	r26, 0x32	; 50
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e2 e3       	ldi	r30, 0x32	; 50
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	8c 93       	st	X, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e8       	ldi	r26, 0x80	; 128
    1204:	bf e3       	ldi	r27, 0x3F	; 63
    1206:	8f a3       	std	Y+39, r24	; 0x27
    1208:	98 a7       	std	Y+40, r25	; 0x28
    120a:	a9 a7       	std	Y+41, r26	; 0x29
    120c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	6f a1       	ldd	r22, Y+39	; 0x27
    1210:	78 a5       	ldd	r23, Y+40	; 0x28
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a e7       	ldi	r20, 0x7A	; 122
    121c:	53 e4       	ldi	r21, 0x43	; 67
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8b a3       	std	Y+35, r24	; 0x23
    1228:	9c a3       	std	Y+36, r25	; 0x24
    122a:	ad a3       	std	Y+37, r26	; 0x25
    122c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    122e:	6b a1       	ldd	r22, Y+35	; 0x23
    1230:	7c a1       	ldd	r23, Y+36	; 0x24
    1232:	8d a1       	ldd	r24, Y+37	; 0x25
    1234:	9e a1       	ldd	r25, Y+38	; 0x26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <LCD_sendCommand+0x176>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9a a3       	std	Y+34, r25	; 0x22
    124c:	89 a3       	std	Y+33, r24	; 0x21
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1250:	6b a1       	ldd	r22, Y+35	; 0x23
    1252:	7c a1       	ldd	r23, Y+36	; 0x24
    1254:	8d a1       	ldd	r24, Y+37	; 0x25
    1256:	9e a1       	ldd	r25, Y+38	; 0x26
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	6f a1       	ldd	r22, Y+39	; 0x27
    126a:	78 a5       	ldd	r23, Y+40	; 0x28
    126c:	89 a5       	ldd	r24, Y+41	; 0x29
    126e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <LCD_sendCommand+0x1d6>
    1292:	89 e1       	ldi	r24, 0x19	; 25
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	98 a3       	std	Y+32, r25	; 0x20
    1298:	8f 8f       	std	Y+31, r24	; 0x1f
    129a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    129c:	98 a1       	ldd	r25, Y+32	; 0x20
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <LCD_sendCommand+0x1c4>
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	89 a1       	ldd	r24, Y+33	; 0x21
    12a8:	9a a1       	ldd	r25, Y+34	; 0x22
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9a a3       	std	Y+34, r25	; 0x22
    12ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	89 a1       	ldd	r24, Y+33	; 0x21
    12b2:	9a a1       	ldd	r25, Y+34	; 0x22
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <LCD_sendCommand+0x1b8>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6b a1       	ldd	r22, Y+35	; 0x23
    12bc:	7c a1       	ldd	r23, Y+36	; 0x24
    12be:	8d a1       	ldd	r24, Y+37	; 0x25
    12c0:	9e a1       	ldd	r25, Y+38	; 0x26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	9e 8f       	std	Y+30, r25	; 0x1e
    12d4:	8d 8f       	std	Y+29, r24	; 0x1d
    12d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <LCD_sendCommand+0x200>
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 ad       	ldd	r24, Y+57	; 0x39
    12e8:	80 83       	st	Z, r24
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e8       	ldi	r26, 0x80	; 128
    12f0:	bf e3       	ldi	r27, 0x3F	; 63
    12f2:	89 8f       	std	Y+25, r24	; 0x19
    12f4:	9a 8f       	std	Y+26, r25	; 0x1a
    12f6:	ab 8f       	std	Y+27, r26	; 0x1b
    12f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	69 8d       	ldd	r22, Y+25	; 0x19
    12fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a e7       	ldi	r20, 0x7A	; 122
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8d 8b       	std	Y+21, r24	; 0x15
    1314:	9e 8b       	std	Y+22, r25	; 0x16
    1316:	af 8b       	std	Y+23, r26	; 0x17
    1318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    131a:	6d 89       	ldd	r22, Y+21	; 0x15
    131c:	7e 89       	ldd	r23, Y+22	; 0x16
    131e:	8f 89       	ldd	r24, Y+23	; 0x17
    1320:	98 8d       	ldd	r25, Y+24	; 0x18
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <LCD_sendCommand+0x262>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 8b       	std	Y+20, r25	; 0x14
    1338:	8b 8b       	std	Y+19, r24	; 0x13
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    133c:	6d 89       	ldd	r22, Y+21	; 0x15
    133e:	7e 89       	ldd	r23, Y+22	; 0x16
    1340:	8f 89       	ldd	r24, Y+23	; 0x17
    1342:	98 8d       	ldd	r25, Y+24	; 0x18
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	69 8d       	ldd	r22, Y+25	; 0x19
    1356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	0f c0       	rjmp	.+30     	; 0x139c <LCD_sendCommand+0x2c2>
    137e:	89 e1       	ldi	r24, 0x19	; 25
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a 8b       	std	Y+18, r25	; 0x12
    1384:	89 8b       	std	Y+17, r24	; 0x11
    1386:	89 89       	ldd	r24, Y+17	; 0x11
    1388:	9a 89       	ldd	r25, Y+18	; 0x12
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <LCD_sendCommand+0x2b0>
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8b 89       	ldd	r24, Y+19	; 0x13
    139e:	9c 89       	ldd	r25, Y+20	; 0x14
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <LCD_sendCommand+0x2a4>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	6d 89       	ldd	r22, Y+21	; 0x15
    13a8:	7e 89       	ldd	r23, Y+22	; 0x16
    13aa:	8f 89       	ldd	r24, Y+23	; 0x17
    13ac:	98 8d       	ldd	r25, Y+24	; 0x18
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9c 8b       	std	Y+20, r25	; 0x14
    13b8:	8b 8b       	std	Y+19, r24	; 0x13
    13ba:	8b 89       	ldd	r24, Y+19	; 0x13
    13bc:	9c 89       	ldd	r25, Y+20	; 0x14
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	98 89       	ldd	r25, Y+16	; 0x10
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_sendCommand+0x2ec>
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    13ce:	a2 e3       	ldi	r26, 0x32	; 50
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e2 e3       	ldi	r30, 0x32	; 50
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 7b       	andi	r24, 0xBF	; 191
    13da:	8c 93       	st	X, r24
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e8       	ldi	r26, 0x80	; 128
    13e2:	bf e3       	ldi	r27, 0x3F	; 63
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	ad 87       	std	Y+13, r26	; 0x0d
    13ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a e7       	ldi	r20, 0x7A	; 122
    13fa:	53 e4       	ldi	r21, 0x43	; 67
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	8f 83       	std	Y+7, r24	; 0x07
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	a9 87       	std	Y+9, r26	; 0x09
    140a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <LCD_sendCommand+0x354>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <LCD_sendCommand+0x3b4>
    1470:	89 e1       	ldi	r24, 0x19	; 25
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_sendCommand+0x3a2>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <LCD_sendCommand+0x396>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_sendCommand+0x3de>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    14c0:	e9 96       	adiw	r28, 0x39	; 57
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	e9 97       	sbiw	r28, 0x39	; 57
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    14e8:	a2 e3       	ldi	r26, 0x32	; 50
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	80 61       	ori	r24, 0x10	; 16
    14f4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 7d       	andi	r24, 0xDF	; 223
    1502:	8c 93       	st	X, r24
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e8       	ldi	r26, 0x80	; 128
    150a:	bf e3       	ldi	r27, 0x3F	; 63
    150c:	8d ab       	std	Y+53, r24	; 0x35
    150e:	9e ab       	std	Y+54, r25	; 0x36
    1510:	af ab       	std	Y+55, r26	; 0x37
    1512:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	6d a9       	ldd	r22, Y+53	; 0x35
    1516:	7e a9       	ldd	r23, Y+54	; 0x36
    1518:	8f a9       	ldd	r24, Y+55	; 0x37
    151a:	98 ad       	ldd	r25, Y+56	; 0x38
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a e7       	ldi	r20, 0x7A	; 122
    1522:	53 e4       	ldi	r21, 0x43	; 67
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	89 ab       	std	Y+49, r24	; 0x31
    152e:	9a ab       	std	Y+50, r25	; 0x32
    1530:	ab ab       	std	Y+51, r26	; 0x33
    1532:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1534:	69 a9       	ldd	r22, Y+49	; 0x31
    1536:	7a a9       	ldd	r23, Y+50	; 0x32
    1538:	8b a9       	ldd	r24, Y+51	; 0x33
    153a:	9c a9       	ldd	r25, Y+52	; 0x34
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	2c f4       	brge	.+10     	; 0x1556 <LCD_displayCharacter+0x84>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	4c f5       	brge	.+82     	; 0x15c0 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	6d a9       	ldd	r22, Y+53	; 0x35
    1570:	7e a9       	ldd	r23, Y+54	; 0x36
    1572:	8f a9       	ldd	r24, Y+55	; 0x37
    1574:	98 ad       	ldd	r25, Y+56	; 0x38
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	98 ab       	std	Y+48, r25	; 0x30
    1594:	8f a7       	std	Y+47, r24	; 0x2f
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <LCD_displayCharacter+0xe4>
    1598:	89 e1       	ldi	r24, 0x19	; 25
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9e a7       	std	Y+46, r25	; 0x2e
    159e:	8d a7       	std	Y+45, r24	; 0x2d
    15a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCD_displayCharacter+0xd2>
    15a8:	9e a7       	std	Y+46, r25	; 0x2e
    15aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ae:	98 a9       	ldd	r25, Y+48	; 0x30
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	98 ab       	std	Y+48, r25	; 0x30
    15b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <LCD_displayCharacter+0xc6>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	69 a9       	ldd	r22, Y+49	; 0x31
    15c2:	7a a9       	ldd	r23, Y+50	; 0x32
    15c4:	8b a9       	ldd	r24, Y+51	; 0x33
    15c6:	9c a9       	ldd	r25, Y+52	; 0x34
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	98 ab       	std	Y+48, r25	; 0x30
    15d2:	8f a7       	std	Y+47, r24	; 0x2f
    15d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d6:	98 a9       	ldd	r25, Y+48	; 0x30
    15d8:	9c a7       	std	Y+44, r25	; 0x2c
    15da:	8b a7       	std	Y+43, r24	; 0x2b
    15dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    15de:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_displayCharacter+0x10e>
    15e4:	9c a7       	std	Y+44, r25	; 0x2c
    15e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    15e8:	a2 e3       	ldi	r26, 0x32	; 50
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e2 e3       	ldi	r30, 0x32	; 50
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	80 64       	ori	r24, 0x40	; 64
    15f4:	8c 93       	st	X, r24
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e8       	ldi	r26, 0x80	; 128
    15fc:	bf e3       	ldi	r27, 0x3F	; 63
    15fe:	8f a3       	std	Y+39, r24	; 0x27
    1600:	98 a7       	std	Y+40, r25	; 0x28
    1602:	a9 a7       	std	Y+41, r26	; 0x29
    1604:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	6f a1       	ldd	r22, Y+39	; 0x27
    1608:	78 a5       	ldd	r23, Y+40	; 0x28
    160a:	89 a5       	ldd	r24, Y+41	; 0x29
    160c:	9a a5       	ldd	r25, Y+42	; 0x2a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8b a3       	std	Y+35, r24	; 0x23
    1620:	9c a3       	std	Y+36, r25	; 0x24
    1622:	ad a3       	std	Y+37, r26	; 0x25
    1624:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1626:	6b a1       	ldd	r22, Y+35	; 0x23
    1628:	7c a1       	ldd	r23, Y+36	; 0x24
    162a:	8d a1       	ldd	r24, Y+37	; 0x25
    162c:	9e a1       	ldd	r25, Y+38	; 0x26
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <LCD_displayCharacter+0x176>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9a a3       	std	Y+34, r25	; 0x22
    1644:	89 a3       	std	Y+33, r24	; 0x21
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1648:	6b a1       	ldd	r22, Y+35	; 0x23
    164a:	7c a1       	ldd	r23, Y+36	; 0x24
    164c:	8d a1       	ldd	r24, Y+37	; 0x25
    164e:	9e a1       	ldd	r25, Y+38	; 0x26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	6f a1       	ldd	r22, Y+39	; 0x27
    1662:	78 a5       	ldd	r23, Y+40	; 0x28
    1664:	89 a5       	ldd	r24, Y+41	; 0x29
    1666:	9a a5       	ldd	r25, Y+42	; 0x2a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9a a3       	std	Y+34, r25	; 0x22
    1686:	89 a3       	std	Y+33, r24	; 0x21
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <LCD_displayCharacter+0x1d6>
    168a:	89 e1       	ldi	r24, 0x19	; 25
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	98 a3       	std	Y+32, r25	; 0x20
    1690:	8f 8f       	std	Y+31, r24	; 0x1f
    1692:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1694:	98 a1       	ldd	r25, Y+32	; 0x20
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_displayCharacter+0x1c4>
    169a:	98 a3       	std	Y+32, r25	; 0x20
    169c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	89 a1       	ldd	r24, Y+33	; 0x21
    16a0:	9a a1       	ldd	r25, Y+34	; 0x22
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9a a3       	std	Y+34, r25	; 0x22
    16a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	89 a1       	ldd	r24, Y+33	; 0x21
    16aa:	9a a1       	ldd	r25, Y+34	; 0x22
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <LCD_displayCharacter+0x1b8>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6b a1       	ldd	r22, Y+35	; 0x23
    16b4:	7c a1       	ldd	r23, Y+36	; 0x24
    16b6:	8d a1       	ldd	r24, Y+37	; 0x25
    16b8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9a a3       	std	Y+34, r25	; 0x22
    16c4:	89 a3       	std	Y+33, r24	; 0x21
    16c6:	89 a1       	ldd	r24, Y+33	; 0x21
    16c8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ca:	9e 8f       	std	Y+30, r25	; 0x1e
    16cc:	8d 8f       	std	Y+29, r24	; 0x1d
    16ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_displayCharacter+0x200>
    16d6:	9e 8f       	std	Y+30, r25	; 0x1e
    16d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	89 ad       	ldd	r24, Y+57	; 0x39
    16e0:	80 83       	st	Z, r24
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e8       	ldi	r26, 0x80	; 128
    16e8:	bf e3       	ldi	r27, 0x3F	; 63
    16ea:	89 8f       	std	Y+25, r24	; 0x19
    16ec:	9a 8f       	std	Y+26, r25	; 0x1a
    16ee:	ab 8f       	std	Y+27, r26	; 0x1b
    16f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	69 8d       	ldd	r22, Y+25	; 0x19
    16f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a e7       	ldi	r20, 0x7A	; 122
    1700:	53 e4       	ldi	r21, 0x43	; 67
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8d 8b       	std	Y+21, r24	; 0x15
    170c:	9e 8b       	std	Y+22, r25	; 0x16
    170e:	af 8b       	std	Y+23, r26	; 0x17
    1710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1712:	6d 89       	ldd	r22, Y+21	; 0x15
    1714:	7e 89       	ldd	r23, Y+22	; 0x16
    1716:	8f 89       	ldd	r24, Y+23	; 0x17
    1718:	98 8d       	ldd	r25, Y+24	; 0x18
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	2c f4       	brge	.+10     	; 0x1734 <LCD_displayCharacter+0x262>
		__ticks = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1748:	18 16       	cp	r1, r24
    174a:	4c f5       	brge	.+82     	; 0x179e <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	69 8d       	ldd	r22, Y+25	; 0x19
    174e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9c 8b       	std	Y+20, r25	; 0x14
    1772:	8b 8b       	std	Y+19, r24	; 0x13
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <LCD_displayCharacter+0x2c2>
    1776:	89 e1       	ldi	r24, 0x19	; 25
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9a 8b       	std	Y+18, r25	; 0x12
    177c:	89 8b       	std	Y+17, r24	; 0x11
    177e:	89 89       	ldd	r24, Y+17	; 0x11
    1780:	9a 89       	ldd	r25, Y+18	; 0x12
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_displayCharacter+0x2b0>
    1786:	9a 8b       	std	Y+18, r25	; 0x12
    1788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	8b 89       	ldd	r24, Y+19	; 0x13
    178c:	9c 89       	ldd	r25, Y+20	; 0x14
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f7       	brne	.-38     	; 0x1776 <LCD_displayCharacter+0x2a4>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179e:	6d 89       	ldd	r22, Y+21	; 0x15
    17a0:	7e 89       	ldd	r23, Y+22	; 0x16
    17a2:	8f 89       	ldd	r24, Y+23	; 0x17
    17a4:	98 8d       	ldd	r25, Y+24	; 0x18
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9c 8b       	std	Y+20, r25	; 0x14
    17b0:	8b 8b       	std	Y+19, r24	; 0x13
    17b2:	8b 89       	ldd	r24, Y+19	; 0x13
    17b4:	9c 89       	ldd	r25, Y+20	; 0x14
    17b6:	98 8b       	std	Y+16, r25	; 0x10
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
    17ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    17bc:	98 89       	ldd	r25, Y+16	; 0x10
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_displayCharacter+0x2ec>
    17c2:	98 8b       	std	Y+16, r25	; 0x10
    17c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 7b       	andi	r24, 0xBF	; 191
    17d2:	8c 93       	st	X, r24
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8b 87       	std	Y+11, r24	; 0x0b
    17de:	9c 87       	std	Y+12, r25	; 0x0c
    17e0:	ad 87       	std	Y+13, r26	; 0x0d
    17e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a e7       	ldi	r20, 0x7A	; 122
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	a9 87       	std	Y+9, r26	; 0x09
    1802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_displayCharacter+0x354>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1840:	7c 85       	ldd	r23, Y+12	; 0x0c
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_displayCharacter+0x3b4>
    1868:	89 e1       	ldi	r24, 0x19	; 25
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_displayCharacter+0x3a2>
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_displayCharacter+0x396>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_displayCharacter+0x3de>
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    18b8:	e9 96       	adiw	r28, 0x39	; 57
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <LCD_displayString+0x6>
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	9b 83       	std	Y+3, r25	; 0x03
    18d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    18da:	19 82       	std	Y+1, r1	; 0x01
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	fc 01       	movw	r30, r24
    18ea:	e2 0f       	add	r30, r18
    18ec:	f3 1f       	adc	r31, r19
    18ee:	80 81       	ld	r24, Z
    18f0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <LCD_displayCharacter>
		i++;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	fc 01       	movw	r30, r24
    1906:	e2 0f       	add	r30, r18
    1908:	f3 1f       	adc	r31, r19
    190a:	80 81       	ld	r24, Z
    190c:	88 23       	and	r24, r24
    190e:	39 f7       	brne	.-50     	; 0x18de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <LCD_goToRowColumn+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <LCD_goToRowColumn+0x8>
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* first of all calculate the required address */
	switch(row)
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3d 83       	std	Y+5, r19	; 0x05
    1936:	2c 83       	std	Y+4, r18	; 0x04
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	91 05       	cpc	r25, r1
    1940:	c1 f0       	breq	.+48     	; 0x1972 <LCD_goToRowColumn+0x56>
    1942:	2c 81       	ldd	r18, Y+4	; 0x04
    1944:	3d 81       	ldd	r19, Y+5	; 0x05
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	2c f4       	brge	.+10     	; 0x1956 <LCD_goToRowColumn+0x3a>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	61 f0       	breq	.+24     	; 0x196c <LCD_goToRowColumn+0x50>
    1954:	19 c0       	rjmp	.+50     	; 0x1988 <LCD_goToRowColumn+0x6c>
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	69 f0       	breq	.+26     	; 0x197a <LCD_goToRowColumn+0x5e>
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	91 05       	cpc	r25, r1
    1968:	61 f0       	breq	.+24     	; 0x1982 <LCD_goToRowColumn+0x66>
    196a:	0e c0       	rjmp	.+28     	; 0x1988 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	80 5c       	subi	r24, 0xC0	; 192
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	07 c0       	rjmp	.+14     	; 0x1988 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	80 5f       	subi	r24, 0xF0	; 240
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	80 5b       	subi	r24, 0xB0	; 176
    1986:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	80 68       	ori	r24, 0x80	; 128
    198c:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <LCD_displayStringRowColumn+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <LCD_displayStringRowColumn+0x8>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	6a 83       	std	Y+2, r22	; 0x02
    19b0:	5c 83       	std	Y+4, r21	; 0x04
    19b2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	6a 81       	ldd	r22, Y+2	; 0x02
    19b8:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_displayString>
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	62 97       	sbiw	r28, 0x12	; 18
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	9a 8b       	std	Y+18, r25	; 0x12
    19e8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    19ea:	89 89       	ldd	r24, Y+17	; 0x11
    19ec:	9a 89       	ldd	r25, Y+18	; 0x12
    19ee:	9e 01       	movw	r18, r28
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	b9 01       	movw	r22, r18
    19f6:	4a e0       	ldi	r20, 0x0A	; 10
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	0e 94 bd 12 	call	0x257a	; 0x257a <itoa>
   LCD_displayString(buff);
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_displayString>
}
    1a06:	62 96       	adiw	r28, 0x12	; 18
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <main>:

//Timer_ConfigType timer1_Strut;

//uint8_t count = 0;
int main(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	62 97       	sbiw	r28, 0x12	; 18
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
	/*timer1 init interrupt*/
	//SREG |= (1<<7);                   /* Enable Global Interrupt */


	LCD_init();                        /* initialize LCD */
    1a40:	0e 94 52 08 	call	0x10a4	; 0x10a4 <LCD_init>
	//Button_Init();                     /* initialize Buttons */
	LCD_displayStringRowColumn(0,2,"Please Guess");
    1a44:	20 e6       	ldi	r18, 0x60	; 96
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"the number");
    1a52:	2d e6       	ldi	r18, 0x6D	; 109
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>

	while(1)
	{

		/* if any switch pressed for more than 500 ms it counts more than one press */
		key = KeyPad_getPressedKey(); /* get the pressed key number */
    1a60:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1a64:	8a 8b       	std	Y+18, r24	; 0x12
		count = key;
    1a66:	8a 89       	ldd	r24, Y+18	; 0x12
    1a68:	89 8b       	std	Y+17, r24	; 0x11
		if((key <= 9) && (key >= 0))
    1a6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	38 f4       	brcc	.+14     	; 0x1a7e <main+0x52>
		{
			LCD_clearScreen(); /* clear the LCD display */
    1a70:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_clearScreen>
			LCD_intgerToString(key); /* display the pressed keypad switch */
    1a74:	8a 89       	ldd	r24, Y+18	; 0x12
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LCD_intgerToString>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	aa ef       	ldi	r26, 0xFA	; 250
    1a84:	b3 e4       	ldi	r27, 0x43	; 67
    1a86:	8b 87       	std	Y+11, r24	; 0x0b
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	ad 87       	std	Y+13, r26	; 0x0d
    1a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a e7       	ldi	r20, 0x7A	; 122
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8f 83       	std	Y+7, r24	; 0x07
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	a9 87       	std	Y+9, r26	; 0x09
    1aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <main+0xa4>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <main+0x122>
	else if (__tmp > 65535)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <main+0x104>
    1b12:	89 e1       	ldi	r24, 0x19	; 25
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <main+0xf2>
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <main+0xe6>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <main+0x12e>
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(500); /* Press time */
		key = KeyPad_getPressedKey(); /* get the pressed key number */
    1b62:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b66:	8a 8b       	std	Y+18, r24	; 0x12
		if(key == '=')
    1b68:	8a 89       	ldd	r24, Y+18	; 0x12
    1b6a:	8d 33       	cpi	r24, 0x3D	; 61
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <main+0x144>
    1b6e:	78 cf       	rjmp	.-272    	; 0x1a60 <main+0x34>
		{

			if (count > 15)
    1b70:	89 89       	ldd	r24, Y+17	; 0x11
    1b72:	80 31       	cpi	r24, 0x10	; 16
    1b74:	00 f1       	brcs	.+64     	; 0x1bb6 <main+0x18a>
			{
				LCD_clearScreen(); /* clear the LCD display */
    1b76:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,2,"press from");
    1b7a:	28 e7       	ldi	r18, 0x78	; 120
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	a9 01       	movw	r20, r18
    1b84:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0," ");
    1b88:	23 e8       	ldi	r18, 0x83	; 131
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
				LCD_intgerToString(1);
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LCD_intgerToString>
				LCD_displayStringRowColumn(1,2,"< press <= ");
    1b9e:	25 e8       	ldi	r18, 0x85	; 133
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	62 e0       	ldi	r22, 0x02	; 2
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
				LCD_intgerToString(15);
    1bac:	8f e0       	ldi	r24, 0x0F	; 15
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LCD_intgerToString>
    1bb4:	55 cf       	rjmp	.-342    	; 0x1a60 <main+0x34>
			}
			else if(count < 1)
    1bb6:	89 89       	ldd	r24, Y+17	; 0x11
    1bb8:	88 23       	and	r24, r24
    1bba:	51 f4       	brne	.+20     	; 0x1bd0 <main+0x1a4>
			{
				LCD_clearScreen(); /* clear the LCD display */
    1bbc:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"you should press");
    1bc0:	21 e9       	ldi	r18, 0x91	; 145
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	a9 01       	movw	r20, r18
    1bca:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
    1bce:	48 cf       	rjmp	.-368    	; 0x1a60 <main+0x34>
			}
			else
			{
				int num = (rand()% (15 - 1 +1))+ 1;
    1bd0:	0e 94 ad 12 	call	0x255a	; 0x255a <rand>
    1bd4:	2f e0       	ldi	r18, 0x0F	; 15
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	b9 01       	movw	r22, r18
    1bda:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__divmodhi4>
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	98 8b       	std	Y+16, r25	; 0x10
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
				if (count == num)
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	28 17       	cp	r18, r24
    1bf0:	39 07       	cpc	r19, r25
    1bf2:	51 f4       	brne	.+20     	; 0x1c08 <main+0x1dc>
				{
					LCD_clearScreen(); /* clear the LCD display */
    1bf4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,2,"you WIN");
    1bf8:	22 ea       	ldi	r18, 0xA2	; 162
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	a9 01       	movw	r20, r18
    1c02:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
    1c06:	2c cf       	rjmp	.-424    	; 0x1a60 <main+0x34>
				}
				else
				{
					LCD_clearScreen(); /* clear the LCD display */
    1c08:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,2,"you LOSE");
    1c0c:	2a ea       	ldi	r18, 0xAA	; 170
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	62 e0       	ldi	r22, 0x02	; 2
    1c14:	a9 01       	movw	r20, r18
    1c16:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_displayStringRowColumn>
    1c1a:	22 cf       	rjmp	.-444    	; 0x1a60 <main+0x34>

00001c1c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	ef 93       	push	r30
    1c3c:	ff 93       	push	r31
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1c46:	80 91 c0 00 	lds	r24, 0x00C0
    1c4a:	90 91 c1 00 	lds	r25, 0x00C1
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	29 f0       	breq	.+10     	; 0x1c5c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1c52:	e0 91 c0 00 	lds	r30, 0x00C0
    1c56:	f0 91 c1 00 	lds	r31, 0x00C1
    1c5a:	09 95       	icall
	}
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	ff 91       	pop	r31
    1c62:	ef 91       	pop	r30
    1c64:	bf 91       	pop	r27
    1c66:	af 91       	pop	r26
    1c68:	9f 91       	pop	r25
    1c6a:	8f 91       	pop	r24
    1c6c:	7f 91       	pop	r23
    1c6e:	6f 91       	pop	r22
    1c70:	5f 91       	pop	r21
    1c72:	4f 91       	pop	r20
    1c74:	3f 91       	pop	r19
    1c76:	2f 91       	pop	r18
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1cac:	80 91 c0 00 	lds	r24, 0x00C0
    1cb0:	90 91 c1 00 	lds	r25, 0x00C1
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1cb8:	e0 91 c0 00 	lds	r30, 0x00C0
    1cbc:	f0 91 c1 00 	lds	r31, 0x00C1
    1cc0:	09 95       	icall
	}
}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	ff 91       	pop	r31
    1cc8:	ef 91       	pop	r30
    1cca:	bf 91       	pop	r27
    1ccc:	af 91       	pop	r26
    1cce:	9f 91       	pop	r25
    1cd0:	8f 91       	pop	r24
    1cd2:	7f 91       	pop	r23
    1cd4:	6f 91       	pop	r22
    1cd6:	5f 91       	pop	r21
    1cd8:	4f 91       	pop	r20
    1cda:	3f 91       	pop	r19
    1cdc:	2f 91       	pop	r18
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1ce8:	1f 92       	push	r1
    1cea:	0f 92       	push	r0
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	0f 92       	push	r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1d12:	80 91 c2 00 	lds	r24, 0x00C2
    1d16:	90 91 c3 00 	lds	r25, 0x00C3
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	29 f0       	breq	.+10     	; 0x1d28 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1d1e:	e0 91 c2 00 	lds	r30, 0x00C2
    1d22:	f0 91 c3 00 	lds	r31, 0x00C3
    1d26:	09 95       	icall
	}
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	ff 91       	pop	r31
    1d2e:	ef 91       	pop	r30
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	7f 91       	pop	r23
    1d3a:	6f 91       	pop	r22
    1d3c:	5f 91       	pop	r21
    1d3e:	4f 91       	pop	r20
    1d40:	3f 91       	pop	r19
    1d42:	2f 91       	pop	r18
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	0f 90       	pop	r0
    1d4a:	1f 90       	pop	r1
    1d4c:	18 95       	reti

00001d4e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1d4e:	1f 92       	push	r1
    1d50:	0f 92       	push	r0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	0f 92       	push	r0
    1d56:	11 24       	eor	r1, r1
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	4f 93       	push	r20
    1d5e:	5f 93       	push	r21
    1d60:	6f 93       	push	r22
    1d62:	7f 93       	push	r23
    1d64:	8f 93       	push	r24
    1d66:	9f 93       	push	r25
    1d68:	af 93       	push	r26
    1d6a:	bf 93       	push	r27
    1d6c:	ef 93       	push	r30
    1d6e:	ff 93       	push	r31
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1d78:	80 91 c2 00 	lds	r24, 0x00C2
    1d7c:	90 91 c3 00 	lds	r25, 0x00C3
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1d84:	e0 91 c2 00 	lds	r30, 0x00C2
    1d88:	f0 91 c3 00 	lds	r31, 0x00C3
    1d8c:	09 95       	icall
	}
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1dde:	80 91 c2 00 	lds	r24, 0x00C2
    1de2:	90 91 c3 00 	lds	r25, 0x00C3
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1dea:	e0 91 c2 00 	lds	r30, 0x00C2
    1dee:	f0 91 c3 00 	lds	r31, 0x00C3
    1df2:	09 95       	icall
	}
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	bf 91       	pop	r27
    1dfe:	af 91       	pop	r26
    1e00:	9f 91       	pop	r25
    1e02:	8f 91       	pop	r24
    1e04:	7f 91       	pop	r23
    1e06:	6f 91       	pop	r22
    1e08:	5f 91       	pop	r21
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	2f 93       	push	r18
    1e26:	3f 93       	push	r19
    1e28:	4f 93       	push	r20
    1e2a:	5f 93       	push	r21
    1e2c:	6f 93       	push	r22
    1e2e:	7f 93       	push	r23
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	af 93       	push	r26
    1e36:	bf 93       	push	r27
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1e44:	80 91 c4 00 	lds	r24, 0x00C4
    1e48:	90 91 c5 00 	lds	r25, 0x00C5
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1e50:	e0 91 c4 00 	lds	r30, 0x00C4
    1e54:	f0 91 c5 00 	lds	r31, 0x00C5
    1e58:	09 95       	icall
	}
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1eaa:	80 91 c4 00 	lds	r24, 0x00C4
    1eae:	90 91 c5 00 	lds	r25, 0x00C5
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1eb6:	e0 91 c4 00 	lds	r30, 0x00C4
    1eba:	f0 91 c5 00 	lds	r31, 0x00C5
    1ebe:	09 95       	icall
	}
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <TIMER0_init+0x6>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    1ef4:	e3 e5       	ldi	r30, 0x53	; 83
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 e8       	ldi	r24, 0x80	; 128
    1efa:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    1efc:	a2 e5       	ldi	r26, 0x52	; 82
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e9 81       	ldd	r30, Y+1	; 0x01
    1f02:	fa 81       	ldd	r31, Y+2	; 0x02
    1f04:	85 81       	ldd	r24, Z+5	; 0x05
    1f06:	96 81       	ldd	r25, Z+6	; 0x06
    1f08:	8c 93       	st	X, r24

	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    1f0a:	ac e5       	ldi	r26, 0x5C	; 92
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	87 81       	ldd	r24, Z+7	; 0x07
    1f14:	90 85       	ldd	r25, Z+8	; 0x08
    1f16:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    1f18:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1c:	84 81       	ldd	r24, Z+4	; 0x04
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	39 f4       	brne	.+14     	; 0x1f30 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		PORTD_DIR |= (1 << OC0);
    1f22:	a1 e3       	ldi	r26, 0x31	; 49
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e1 e3       	ldi	r30, 0x31	; 49
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 60       	ori	r24, 0x08	; 8
    1f2e:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    1f30:	e9 81       	ldd	r30, Y+1	; 0x01
    1f32:	fa 81       	ldd	r31, Y+2	; 0x02
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	88 23       	and	r24, r24
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    1f3a:	a9 e5       	ldi	r26, 0x59	; 89
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e9 e5       	ldi	r30, 0x59	; 89
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	81 60       	ori	r24, 0x01	; 1
    1f46:	8c 93       	st	X, r24
    1f48:	0c c0       	rjmp	.+24     	; 0x1f62 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    1f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4e:	81 81       	ldd	r24, Z+1	; 0x01
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    1f54:	a9 e5       	ldi	r26, 0x59	; 89
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e9 e5       	ldi	r30, 0x59	; 89
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	82 60       	ori	r24, 0x02	; 2
    1f60:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    1f62:	a3 e5       	ldi	r26, 0x53	; 83
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e3 e5       	ldi	r30, 0x53	; 83
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	27 7b       	andi	r18, 0xB7	; 183
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	81 81       	ldd	r24, Z+1	; 0x01
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	00 24       	eor	r0, r0
    1f7c:	96 95       	lsr	r25
    1f7e:	87 95       	ror	r24
    1f80:	07 94       	ror	r0
    1f82:	96 95       	lsr	r25
    1f84:	87 95       	ror	r24
    1f86:	07 94       	ror	r0
    1f88:	98 2f       	mov	r25, r24
    1f8a:	80 2d       	mov	r24, r0
    1f8c:	88 74       	andi	r24, 0x48	; 72
    1f8e:	82 2b       	or	r24, r18
    1f90:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    1f92:	a3 e5       	ldi	r26, 0x53	; 83
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e3 e5       	ldi	r30, 0x53	; 83
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	2f 7c       	andi	r18, 0xCF	; 207
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	83 70       	andi	r24, 0x03	; 3
    1fac:	90 70       	andi	r25, 0x00	; 0
    1fae:	82 95       	swap	r24
    1fb0:	92 95       	swap	r25
    1fb2:	90 7f       	andi	r25, 0xF0	; 240
    1fb4:	98 27       	eor	r25, r24
    1fb6:	80 7f       	andi	r24, 0xF0	; 240
    1fb8:	98 27       	eor	r25, r24
    1fba:	82 2b       	or	r24, r18
    1fbc:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    1fbe:	a3 e5       	ldi	r26, 0x53	; 83
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e3 e5       	ldi	r30, 0x53	; 83
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	98 2f       	mov	r25, r24
    1fca:	98 7f       	andi	r25, 0xF8	; 248
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	80 81       	ld	r24, Z
    1fd2:	87 70       	andi	r24, 0x07	; 7
    1fd4:	89 2b       	or	r24, r25
    1fd6:	8c 93       	st	X, r24
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <TIMER1_init+0x6>
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    1ff0:	ac e4       	ldi	r26, 0x4C	; 76
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	85 81       	ldd	r24, Z+5	; 0x05
    1ffa:	96 81       	ldd	r25, Z+6	; 0x06
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24

	if( (Config_Ptr->mode ) == NORMAL_MODE )
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	88 23       	and	r24, r24
    200a:	91 f4       	brne	.+36     	; 0x2030 <TIMER1_init+0x4e>
	{
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    200c:	ef e4       	ldi	r30, 0x4F	; 79
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8c e0       	ldi	r24, 0x0C	; 12
    2012:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	83 85       	ldd	r24, Z+11	; 0x0b
    201a:	88 23       	and	r24, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <TIMER1_init+0x3e>
    201e:	ea c0       	rjmp	.+468    	; 0x21f4 <TIMER1_init+0x212>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << TOIE1);
    2020:	a9 e5       	ldi	r26, 0x59	; 89
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e9 e5       	ldi	r30, 0x59	; 89
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	84 60       	ori	r24, 0x04	; 4
    202c:	8c 93       	st	X, r24
    202e:	e2 c0       	rjmp	.+452    	; 0x21f4 <TIMER1_init+0x212>
		}

	}
	else if((Config_Ptr->mode ) == CTC_MODE){
    2030:	e9 81       	ldd	r30, Y+1	; 0x01
    2032:	fa 81       	ldd	r31, Y+2	; 0x02
    2034:	81 81       	ldd	r24, Z+1	; 0x01
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	d9 f4       	brne	.+54     	; 0x2070 <TIMER1_init+0x8e>
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    203a:	ef e4       	ldi	r30, 0x4F	; 79
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	8c e0       	ldi	r24, 0x0C	; 12
    2040:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
    2042:	e9 81       	ldd	r30, Y+1	; 0x01
    2044:	fa 81       	ldd	r31, Y+2	; 0x02
    2046:	83 85       	ldd	r24, Z+11	; 0x0b
    2048:	88 23       	and	r24, r24
    204a:	39 f0       	breq	.+14     	; 0x205a <TIMER1_init+0x78>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << OCIE1A);
    204c:	a9 e5       	ldi	r26, 0x59	; 89
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e9 e5       	ldi	r30, 0x59	; 89
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 61       	ori	r24, 0x10	; 16
    2058:	8c 93       	st	X, r24
		}
		OCR1A    = ((Config_Ptr->top_count));
    205a:	ea e4       	ldi	r30, 0x4A	; 74
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	a9 81       	ldd	r26, Y+1	; 0x01
    2060:	ba 81       	ldd	r27, Y+2	; 0x02
    2062:	19 96       	adiw	r26, 0x09	; 9
    2064:	8d 91       	ld	r24, X+
    2066:	9c 91       	ld	r25, X
    2068:	1a 97       	sbiw	r26, 0x0a	; 10
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
    206e:	c2 c0       	rjmp	.+388    	; 0x21f4 <TIMER1_init+0x212>
//		/* Check for OC1B */
//		else if ((Config_Ptr -> OutputPin) == OC1B){
//			// configure the output pin PD4 in compare mode
//			PORTD_DIR |= (1 << OC1B);
//		}
		if ((Config_Ptr->channel) == CHANNEL_A)
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	84 85       	ldd	r24, Z+12	; 0x0c
    2076:	88 23       	and	r24, r24
    2078:	09 f0       	breq	.+2      	; 0x207c <TIMER1_init+0x9a>
    207a:	5d c0       	rjmp	.+186    	; 0x2136 <TIMER1_init+0x154>
		{
			// configure the output pin PD5 in compare mode
				PORTD_DIR |= (1 << OC1A);
    207c:	a1 e3       	ldi	r26, 0x31	; 49
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e1 e3       	ldi	r30, 0x31	; 49
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 62       	ori	r24, 0x20	; 32
    2088:	8c 93       	st	X, r24

			/*set compare value for compare mode channel A*/
			OCR1A  = ((Config_Ptr->compare_value));
    208a:	aa e4       	ldi	r26, 0x4A	; 74
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	87 81       	ldd	r24, Z+7	; 0x07
    2094:	90 85       	ldd	r25, Z+8	; 0x08
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	9c 93       	st	X, r25
    209a:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
    209c:	a6 e4       	ldi	r26, 0x46	; 70
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e9 81       	ldd	r30, Y+1	; 0x01
    20a2:	fa 81       	ldd	r31, Y+2	; 0x02
    20a4:	81 85       	ldd	r24, Z+9	; 0x09
    20a6:	92 85       	ldd	r25, Z+10	; 0x0a
    20a8:	11 96       	adiw	r26, 0x01	; 1
    20aa:	9c 93       	st	X, r25
    20ac:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
    20ae:	e9 81       	ldd	r30, Y+1	; 0x01
    20b0:	fa 81       	ldd	r31, Y+2	; 0x02
    20b2:	83 85       	ldd	r24, Z+11	; 0x0b
    20b4:	88 23       	and	r24, r24
    20b6:	39 f0       	breq	.+14     	; 0x20c6 <TIMER1_init+0xe4>
				/* Enable interrupt for compare mode channel A */
				TIMSK |= (1 << OCIE1A);
    20b8:	a9 e5       	ldi	r26, 0x59	; 89
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e9 e5       	ldi	r30, 0x59	; 89
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 61       	ori	r24, 0x10	; 16
    20c4:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel A */
			TCCR1A = ( ( TCCR1A & 0x3F ) | ( (Config_Ptr -> compare_output) << COM1A0) );
    20c6:	af e4       	ldi	r26, 0x4F	; 79
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ef e4       	ldi	r30, 0x4F	; 79
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	28 2f       	mov	r18, r24
    20d2:	2f 73       	andi	r18, 0x3F	; 63
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	00 24       	eor	r0, r0
    20e0:	96 95       	lsr	r25
    20e2:	87 95       	ror	r24
    20e4:	07 94       	ror	r0
    20e6:	96 95       	lsr	r25
    20e8:	87 95       	ror	r24
    20ea:	07 94       	ror	r0
    20ec:	98 2f       	mov	r25, r24
    20ee:	80 2d       	mov	r24, r0
    20f0:	82 2b       	or	r24, r18
    20f2:	8c 93       	st	X, r24
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    20f4:	af e4       	ldi	r26, 0x4F	; 79
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ef e4       	ldi	r30, 0x4F	; 79
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	98 2f       	mov	r25, r24
    2100:	9c 7f       	andi	r25, 0xFC	; 252
    2102:	e9 81       	ldd	r30, Y+1	; 0x01
    2104:	fa 81       	ldd	r31, Y+2	; 0x02
    2106:	83 81       	ldd	r24, Z+3	; 0x03
    2108:	89 2b       	or	r24, r25
    210a:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    210c:	ae e4       	ldi	r26, 0x4E	; 78
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ee e4       	ldi	r30, 0x4E	; 78
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	28 2f       	mov	r18, r24
    2118:	27 7e       	andi	r18, 0xE7	; 231
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	81 81       	ldd	r24, Z+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	82 2b       	or	r24, r18
    2132:	8c 93       	st	X, r24
    2134:	5f c0       	rjmp	.+190    	; 0x21f4 <TIMER1_init+0x212>

		}

		else if ( (Config_Ptr->channel) == CHANNEL_B){
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	84 85       	ldd	r24, Z+12	; 0x0c
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	09 f0       	breq	.+2      	; 0x2142 <TIMER1_init+0x160>
    2140:	59 c0       	rjmp	.+178    	; 0x21f4 <TIMER1_init+0x212>
			// configure the output pin PD4 in compare mode
			PORTD_DIR |= (1 << OC1B);
    2142:	a1 e3       	ldi	r26, 0x31	; 49
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e1 e3       	ldi	r30, 0x31	; 49
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 61       	ori	r24, 0x10	; 16
    214e:	8c 93       	st	X, r24

			/*set compare value for compare mode channel B*/
			OCR1B  = ((Config_Ptr -> compare_value));
    2150:	a8 e4       	ldi	r26, 0x48	; 72
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e9 81       	ldd	r30, Y+1	; 0x01
    2156:	fa 81       	ldd	r31, Y+2	; 0x02
    2158:	87 81       	ldd	r24, Z+7	; 0x07
    215a:	90 85       	ldd	r25, Z+8	; 0x08
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	9c 93       	st	X, r25
    2160:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
    2162:	a6 e4       	ldi	r26, 0x46	; 70
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	81 85       	ldd	r24, Z+9	; 0x09
    216c:	92 85       	ldd	r25, Z+10	; 0x0a
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	9c 93       	st	X, r25
    2172:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	83 85       	ldd	r24, Z+11	; 0x0b
    217a:	88 23       	and	r24, r24
    217c:	39 f0       	breq	.+14     	; 0x218c <TIMER1_init+0x1aa>
				/* Enable interrupt for compare mode channel B */
				TIMSK |= (1 << OCIE1B);
    217e:	a9 e5       	ldi	r26, 0x59	; 89
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e9 e5       	ldi	r30, 0x59	; 89
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	88 60       	ori	r24, 0x08	; 8
    218a:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel B */
			TCCR1A = ( ( TCCR1A & 0xCF ) | ( (Config_Ptr -> compare_output) << COM1B0) );
    218c:	af e4       	ldi	r26, 0x4F	; 79
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	ef e4       	ldi	r30, 0x4F	; 79
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	28 2f       	mov	r18, r24
    2198:	2f 7c       	andi	r18, 0xCF	; 207
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	82 95       	swap	r24
    21a6:	92 95       	swap	r25
    21a8:	90 7f       	andi	r25, 0xF0	; 240
    21aa:	98 27       	eor	r25, r24
    21ac:	80 7f       	andi	r24, 0xF0	; 240
    21ae:	98 27       	eor	r25, r24
    21b0:	82 2b       	or	r24, r18
    21b2:	8c 93       	st	X, r24
			/*configure the mode of the timer*/
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    21b4:	af e4       	ldi	r26, 0x4F	; 79
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ef e4       	ldi	r30, 0x4F	; 79
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	98 2f       	mov	r25, r24
    21c0:	9c 7f       	andi	r25, 0xFC	; 252
    21c2:	e9 81       	ldd	r30, Y+1	; 0x01
    21c4:	fa 81       	ldd	r31, Y+2	; 0x02
    21c6:	83 81       	ldd	r24, Z+3	; 0x03
    21c8:	89 2b       	or	r24, r25
    21ca:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    21cc:	ae e4       	ldi	r26, 0x4E	; 78
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ee e4       	ldi	r30, 0x4E	; 78
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	28 2f       	mov	r18, r24
    21d8:	27 7e       	andi	r18, 0xE7	; 231
    21da:	e9 81       	ldd	r30, Y+1	; 0x01
    21dc:	fa 81       	ldd	r31, Y+2	; 0x02
    21de:	81 81       	ldd	r24, Z+1	; 0x01
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	82 2b       	or	r24, r18
    21f2:	8c 93       	st	X, r24
		}
	}
	TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	98 2f       	mov	r25, r24
    2200:	9c 7f       	andi	r25, 0xFC	; 252
    2202:	e9 81       	ldd	r30, Y+1	; 0x01
    2204:	fa 81       	ldd	r31, Y+2	; 0x02
    2206:	83 81       	ldd	r24, Z+3	; 0x03
    2208:	89 2b       	or	r24, r25
    220a:	8c 93       	st	X, r24
	TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
    220c:	ae e4       	ldi	r26, 0x4E	; 78
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ee e4       	ldi	r30, 0x4E	; 78
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	28 2f       	mov	r18, r24
    2218:	27 7e       	andi	r18, 0xE7	; 231
    221a:	e9 81       	ldd	r30, Y+1	; 0x01
    221c:	fa 81       	ldd	r31, Y+2	; 0x02
    221e:	81 81       	ldd	r24, Z+1	; 0x01
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	82 2b       	or	r24, r18
    2232:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    2234:	ae e4       	ldi	r26, 0x4E	; 78
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ee e4       	ldi	r30, 0x4E	; 78
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	98 2f       	mov	r25, r24
    2240:	98 7f       	andi	r25, 0xF8	; 248
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	80 81       	ld	r24, Z
    2248:	89 2b       	or	r24, r25
    224a:	8c 93       	st	X, r24
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <TIMER2_init+0x6>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    2264:	a4 e4       	ldi	r26, 0x44	; 68
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	85 81       	ldd	r24, Z+5	; 0x05
    226e:	96 81       	ldd	r25, Z+6	; 0x06
    2270:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    2272:	a3 e4       	ldi	r26, 0x43	; 67
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e9 81       	ldd	r30, Y+1	; 0x01
    2278:	fa 81       	ldd	r31, Y+2	; 0x02
    227a:	87 81       	ldd	r24, Z+7	; 0x07
    227c:	90 85       	ldd	r25, Z+8	; 0x08
    227e:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    2280:	e5 e4       	ldi	r30, 0x45	; 69
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 e8       	ldi	r24, 0x80	; 128
    2286:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    2288:	e9 81       	ldd	r30, Y+1	; 0x01
    228a:	fa 81       	ldd	r31, Y+2	; 0x02
    228c:	81 81       	ldd	r24, Z+1	; 0x01
    228e:	88 23       	and	r24, r24
    2290:	41 f4       	brne	.+16     	; 0x22a2 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    2292:	a9 e5       	ldi	r26, 0x59	; 89
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e9 e5       	ldi	r30, 0x59	; 89
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	80 64       	ori	r24, 0x40	; 64
    229e:	8c 93       	st	X, r24
    22a0:	0c c0       	rjmp	.+24     	; 0x22ba <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	39 f4       	brne	.+14     	; 0x22ba <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    22ac:	a9 e5       	ldi	r26, 0x59	; 89
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e9 e5       	ldi	r30, 0x59	; 89
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 68       	ori	r24, 0x80	; 128
    22b8:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    22ba:	a5 e4       	ldi	r26, 0x45	; 69
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e4       	ldi	r30, 0x45	; 69
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	28 2f       	mov	r18, r24
    22c6:	27 7b       	andi	r18, 0xB7	; 183
    22c8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ca:	fa 81       	ldd	r31, Y+2	; 0x02
    22cc:	81 81       	ldd	r24, Z+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 74       	andi	r24, 0x48	; 72
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	00 24       	eor	r0, r0
    22d8:	96 95       	lsr	r25
    22da:	87 95       	ror	r24
    22dc:	07 94       	ror	r0
    22de:	96 95       	lsr	r25
    22e0:	87 95       	ror	r24
    22e2:	07 94       	ror	r0
    22e4:	98 2f       	mov	r25, r24
    22e6:	80 2d       	mov	r24, r0
    22e8:	82 2b       	or	r24, r18
    22ea:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    22ec:	a5 e4       	ldi	r26, 0x45	; 69
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e5 e4       	ldi	r30, 0x45	; 69
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	28 2f       	mov	r18, r24
    22f8:	2f 7c       	andi	r18, 0xCF	; 207
    22fa:	e9 81       	ldd	r30, Y+1	; 0x01
    22fc:	fa 81       	ldd	r31, Y+2	; 0x02
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	83 70       	andi	r24, 0x03	; 3
    2306:	90 70       	andi	r25, 0x00	; 0
    2308:	82 95       	swap	r24
    230a:	92 95       	swap	r25
    230c:	90 7f       	andi	r25, 0xF0	; 240
    230e:	98 27       	eor	r25, r24
    2310:	80 7f       	andi	r24, 0xF0	; 240
    2312:	98 27       	eor	r25, r24
    2314:	82 2b       	or	r24, r18
    2316:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    2318:	a5 e4       	ldi	r26, 0x45	; 69
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e5 e4       	ldi	r30, 0x45	; 69
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	98 2f       	mov	r25, r24
    2324:	98 7f       	andi	r25, 0xF8	; 248
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	80 81       	ld	r24, Z
    232c:	87 70       	andi	r24, 0x07	; 7
    232e:	89 2b       	or	r24, r25
    2330:	8c 93       	st	X, r24
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <Timer0_Stop>:

void Timer0_Stop()
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    2344:	a3 e5       	ldi	r26, 0x53	; 83
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e3 e5       	ldi	r30, 0x53	; 83
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	88 7f       	andi	r24, 0xF8	; 248
    2350:	8c 93       	st	X, r24
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <Timer1_Stop>:

void Timer1_Stop(){
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    2360:	ae e4       	ldi	r26, 0x4E	; 78
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 7f       	andi	r24, 0xF8	; 248
    236c:	8c 93       	st	X, r24
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <Timer2_Stop>:

void Timer2_Stop(){
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    237c:	a5 e4       	ldi	r26, 0x45	; 69
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e4       	ldi	r30, 0x45	; 69
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 7f       	andi	r24, 0xF8	; 248
    2388:	8c 93       	st	X, r24
}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <Timer0_setCallBack+0x6>
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	90 93 c1 00 	sts	0x00C1, r25
    23a6:	80 93 c0 00 	sts	0x00C0, r24
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <Timer1_setCallBack+0x6>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	90 93 c3 00 	sts	0x00C3, r25
    23ca:	80 93 c2 00 	sts	0x00C2, r24
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <Timer2_setCallBack+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	90 93 c5 00 	sts	0x00C5, r25
    23ee:	80 93 c4 00 	sts	0x00C4, r24
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <__divmodhi4>:
    23fc:	97 fb       	bst	r25, 7
    23fe:	09 2e       	mov	r0, r25
    2400:	07 26       	eor	r0, r23
    2402:	0a d0       	rcall	.+20     	; 0x2418 <__divmodhi4_neg1>
    2404:	77 fd       	sbrc	r23, 7
    2406:	04 d0       	rcall	.+8      	; 0x2410 <__divmodhi4_neg2>
    2408:	0c d0       	rcall	.+24     	; 0x2422 <__udivmodhi4>
    240a:	06 d0       	rcall	.+12     	; 0x2418 <__divmodhi4_neg1>
    240c:	00 20       	and	r0, r0
    240e:	1a f4       	brpl	.+6      	; 0x2416 <__divmodhi4_exit>

00002410 <__divmodhi4_neg2>:
    2410:	70 95       	com	r23
    2412:	61 95       	neg	r22
    2414:	7f 4f       	sbci	r23, 0xFF	; 255

00002416 <__divmodhi4_exit>:
    2416:	08 95       	ret

00002418 <__divmodhi4_neg1>:
    2418:	f6 f7       	brtc	.-4      	; 0x2416 <__divmodhi4_exit>
    241a:	90 95       	com	r25
    241c:	81 95       	neg	r24
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	08 95       	ret

00002422 <__udivmodhi4>:
    2422:	aa 1b       	sub	r26, r26
    2424:	bb 1b       	sub	r27, r27
    2426:	51 e1       	ldi	r21, 0x11	; 17
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <__udivmodhi4_ep>

0000242a <__udivmodhi4_loop>:
    242a:	aa 1f       	adc	r26, r26
    242c:	bb 1f       	adc	r27, r27
    242e:	a6 17       	cp	r26, r22
    2430:	b7 07       	cpc	r27, r23
    2432:	10 f0       	brcs	.+4      	; 0x2438 <__udivmodhi4_ep>
    2434:	a6 1b       	sub	r26, r22
    2436:	b7 0b       	sbc	r27, r23

00002438 <__udivmodhi4_ep>:
    2438:	88 1f       	adc	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	5a 95       	dec	r21
    243e:	a9 f7       	brne	.-22     	; 0x242a <__udivmodhi4_loop>
    2440:	80 95       	com	r24
    2442:	90 95       	com	r25
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	08 95       	ret

0000244a <__prologue_saves__>:
    244a:	2f 92       	push	r2
    244c:	3f 92       	push	r3
    244e:	4f 92       	push	r4
    2450:	5f 92       	push	r5
    2452:	6f 92       	push	r6
    2454:	7f 92       	push	r7
    2456:	8f 92       	push	r8
    2458:	9f 92       	push	r9
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	ca 1b       	sub	r28, r26
    2474:	db 0b       	sbc	r29, r27
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	09 94       	ijmp

00002482 <__epilogue_restores__>:
    2482:	2a 88       	ldd	r2, Y+18	; 0x12
    2484:	39 88       	ldd	r3, Y+17	; 0x11
    2486:	48 88       	ldd	r4, Y+16	; 0x10
    2488:	5f 84       	ldd	r5, Y+15	; 0x0f
    248a:	6e 84       	ldd	r6, Y+14	; 0x0e
    248c:	7d 84       	ldd	r7, Y+13	; 0x0d
    248e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2490:	9b 84       	ldd	r9, Y+11	; 0x0b
    2492:	aa 84       	ldd	r10, Y+10	; 0x0a
    2494:	b9 84       	ldd	r11, Y+9	; 0x09
    2496:	c8 84       	ldd	r12, Y+8	; 0x08
    2498:	df 80       	ldd	r13, Y+7	; 0x07
    249a:	ee 80       	ldd	r14, Y+6	; 0x06
    249c:	fd 80       	ldd	r15, Y+5	; 0x05
    249e:	0c 81       	ldd	r16, Y+4	; 0x04
    24a0:	1b 81       	ldd	r17, Y+3	; 0x03
    24a2:	aa 81       	ldd	r26, Y+2	; 0x02
    24a4:	b9 81       	ldd	r27, Y+1	; 0x01
    24a6:	ce 0f       	add	r28, r30
    24a8:	d1 1d       	adc	r29, r1
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	ed 01       	movw	r28, r26
    24b6:	08 95       	ret

000024b8 <do_rand>:
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e2 e6       	ldi	r30, 0x62	; 98
    24be:	f2 e1       	ldi	r31, 0x12	; 18
    24c0:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x10>
    24c4:	ec 01       	movw	r28, r24
    24c6:	a8 80       	ld	r10, Y
    24c8:	b9 80       	ldd	r11, Y+1	; 0x01
    24ca:	ca 80       	ldd	r12, Y+2	; 0x02
    24cc:	db 80       	ldd	r13, Y+3	; 0x03
    24ce:	a1 14       	cp	r10, r1
    24d0:	b1 04       	cpc	r11, r1
    24d2:	c1 04       	cpc	r12, r1
    24d4:	d1 04       	cpc	r13, r1
    24d6:	41 f4       	brne	.+16     	; 0x24e8 <do_rand+0x30>
    24d8:	84 e2       	ldi	r24, 0x24	; 36
    24da:	a8 2e       	mov	r10, r24
    24dc:	89 ed       	ldi	r24, 0xD9	; 217
    24de:	b8 2e       	mov	r11, r24
    24e0:	8b e5       	ldi	r24, 0x5B	; 91
    24e2:	c8 2e       	mov	r12, r24
    24e4:	87 e0       	ldi	r24, 0x07	; 7
    24e6:	d8 2e       	mov	r13, r24
    24e8:	c6 01       	movw	r24, r12
    24ea:	b5 01       	movw	r22, r10
    24ec:	2d e1       	ldi	r18, 0x1D	; 29
    24ee:	33 ef       	ldi	r19, 0xF3	; 243
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	0e 94 0d 13 	call	0x261a	; 0x261a <__divmodsi4>
    24f8:	27 ea       	ldi	r18, 0xA7	; 167
    24fa:	31 e4       	ldi	r19, 0x41	; 65
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__mulsi3>
    2504:	7b 01       	movw	r14, r22
    2506:	8c 01       	movw	r16, r24
    2508:	c6 01       	movw	r24, r12
    250a:	b5 01       	movw	r22, r10
    250c:	2d e1       	ldi	r18, 0x1D	; 29
    250e:	33 ef       	ldi	r19, 0xF3	; 243
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	0e 94 0d 13 	call	0x261a	; 0x261a <__divmodsi4>
    2518:	ca 01       	movw	r24, r20
    251a:	b9 01       	movw	r22, r18
    251c:	2c ee       	ldi	r18, 0xEC	; 236
    251e:	34 ef       	ldi	r19, 0xF4	; 244
    2520:	4f ef       	ldi	r20, 0xFF	; 255
    2522:	5f ef       	ldi	r21, 0xFF	; 255
    2524:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__mulsi3>
    2528:	6e 0d       	add	r22, r14
    252a:	7f 1d       	adc	r23, r15
    252c:	80 1f       	adc	r24, r16
    252e:	91 1f       	adc	r25, r17
    2530:	97 ff       	sbrs	r25, 7
    2532:	04 c0       	rjmp	.+8      	; 0x253c <do_rand+0x84>
    2534:	61 50       	subi	r22, 0x01	; 1
    2536:	70 40       	sbci	r23, 0x00	; 0
    2538:	80 40       	sbci	r24, 0x00	; 0
    253a:	90 48       	sbci	r25, 0x80	; 128
    253c:	68 83       	st	Y, r22
    253e:	79 83       	std	Y+1, r23	; 0x01
    2540:	8a 83       	std	Y+2, r24	; 0x02
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	9b 01       	movw	r18, r22
    2546:	3f 77       	andi	r19, 0x7F	; 127
    2548:	c9 01       	movw	r24, r18
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	ea e0       	ldi	r30, 0x0A	; 10
    2550:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x10>

00002554 <rand_r>:
    2554:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <do_rand>
    2558:	08 95       	ret

0000255a <rand>:
    255a:	8b eb       	ldi	r24, 0xBB	; 187
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <do_rand>
    2562:	08 95       	ret

00002564 <srand>:
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	80 93 bb 00 	sts	0x00BB, r24
    256c:	90 93 bc 00 	sts	0x00BC, r25
    2570:	a0 93 bd 00 	sts	0x00BD, r26
    2574:	b0 93 be 00 	sts	0x00BE, r27
    2578:	08 95       	ret

0000257a <itoa>:
    257a:	fb 01       	movw	r30, r22
    257c:	9f 01       	movw	r18, r30
    257e:	e8 94       	clt
    2580:	42 30       	cpi	r20, 0x02	; 2
    2582:	c4 f0       	brlt	.+48     	; 0x25b4 <itoa+0x3a>
    2584:	45 32       	cpi	r20, 0x25	; 37
    2586:	b4 f4       	brge	.+44     	; 0x25b4 <itoa+0x3a>
    2588:	4a 30       	cpi	r20, 0x0A	; 10
    258a:	29 f4       	brne	.+10     	; 0x2596 <itoa+0x1c>
    258c:	97 fb       	bst	r25, 7
    258e:	1e f4       	brtc	.+6      	; 0x2596 <itoa+0x1c>
    2590:	90 95       	com	r25
    2592:	81 95       	neg	r24
    2594:	9f 4f       	sbci	r25, 0xFF	; 255
    2596:	64 2f       	mov	r22, r20
    2598:	77 27       	eor	r23, r23
    259a:	0e 94 11 12 	call	0x2422	; 0x2422 <__udivmodhi4>
    259e:	80 5d       	subi	r24, 0xD0	; 208
    25a0:	8a 33       	cpi	r24, 0x3A	; 58
    25a2:	0c f0       	brlt	.+2      	; 0x25a6 <itoa+0x2c>
    25a4:	89 5d       	subi	r24, 0xD9	; 217
    25a6:	81 93       	st	Z+, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	a1 f7       	brne	.-24     	; 0x2596 <itoa+0x1c>
    25ae:	16 f4       	brtc	.+4      	; 0x25b4 <itoa+0x3a>
    25b0:	5d e2       	ldi	r21, 0x2D	; 45
    25b2:	51 93       	st	Z+, r21
    25b4:	10 82       	st	Z, r1
    25b6:	c9 01       	movw	r24, r18
    25b8:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <strrev>

000025bc <strrev>:
    25bc:	dc 01       	movw	r26, r24
    25be:	fc 01       	movw	r30, r24
    25c0:	67 2f       	mov	r22, r23
    25c2:	71 91       	ld	r23, Z+
    25c4:	77 23       	and	r23, r23
    25c6:	e1 f7       	brne	.-8      	; 0x25c0 <strrev+0x4>
    25c8:	32 97       	sbiw	r30, 0x02	; 2
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <strrev+0x18>
    25cc:	7c 91       	ld	r23, X
    25ce:	6d 93       	st	X+, r22
    25d0:	70 83       	st	Z, r23
    25d2:	62 91       	ld	r22, -Z
    25d4:	ae 17       	cp	r26, r30
    25d6:	bf 07       	cpc	r27, r31
    25d8:	c8 f3       	brcs	.-14     	; 0x25cc <strrev+0x10>
    25da:	08 95       	ret

000025dc <__mulsi3>:
    25dc:	62 9f       	mul	r22, r18
    25de:	d0 01       	movw	r26, r0
    25e0:	73 9f       	mul	r23, r19
    25e2:	f0 01       	movw	r30, r0
    25e4:	82 9f       	mul	r24, r18
    25e6:	e0 0d       	add	r30, r0
    25e8:	f1 1d       	adc	r31, r1
    25ea:	64 9f       	mul	r22, r20
    25ec:	e0 0d       	add	r30, r0
    25ee:	f1 1d       	adc	r31, r1
    25f0:	92 9f       	mul	r25, r18
    25f2:	f0 0d       	add	r31, r0
    25f4:	83 9f       	mul	r24, r19
    25f6:	f0 0d       	add	r31, r0
    25f8:	74 9f       	mul	r23, r20
    25fa:	f0 0d       	add	r31, r0
    25fc:	65 9f       	mul	r22, r21
    25fe:	f0 0d       	add	r31, r0
    2600:	99 27       	eor	r25, r25
    2602:	72 9f       	mul	r23, r18
    2604:	b0 0d       	add	r27, r0
    2606:	e1 1d       	adc	r30, r1
    2608:	f9 1f       	adc	r31, r25
    260a:	63 9f       	mul	r22, r19
    260c:	b0 0d       	add	r27, r0
    260e:	e1 1d       	adc	r30, r1
    2610:	f9 1f       	adc	r31, r25
    2612:	bd 01       	movw	r22, r26
    2614:	cf 01       	movw	r24, r30
    2616:	11 24       	eor	r1, r1
    2618:	08 95       	ret

0000261a <__divmodsi4>:
    261a:	97 fb       	bst	r25, 7
    261c:	09 2e       	mov	r0, r25
    261e:	05 26       	eor	r0, r21
    2620:	0e d0       	rcall	.+28     	; 0x263e <__divmodsi4_neg1>
    2622:	57 fd       	sbrc	r21, 7
    2624:	04 d0       	rcall	.+8      	; 0x262e <__divmodsi4_neg2>
    2626:	14 d0       	rcall	.+40     	; 0x2650 <__udivmodsi4>
    2628:	0a d0       	rcall	.+20     	; 0x263e <__divmodsi4_neg1>
    262a:	00 1c       	adc	r0, r0
    262c:	38 f4       	brcc	.+14     	; 0x263c <__divmodsi4_exit>

0000262e <__divmodsi4_neg2>:
    262e:	50 95       	com	r21
    2630:	40 95       	com	r20
    2632:	30 95       	com	r19
    2634:	21 95       	neg	r18
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	4f 4f       	sbci	r20, 0xFF	; 255
    263a:	5f 4f       	sbci	r21, 0xFF	; 255

0000263c <__divmodsi4_exit>:
    263c:	08 95       	ret

0000263e <__divmodsi4_neg1>:
    263e:	f6 f7       	brtc	.-4      	; 0x263c <__divmodsi4_exit>
    2640:	90 95       	com	r25
    2642:	80 95       	com	r24
    2644:	70 95       	com	r23
    2646:	61 95       	neg	r22
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	8f 4f       	sbci	r24, 0xFF	; 255
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	08 95       	ret

00002650 <__udivmodsi4>:
    2650:	a1 e2       	ldi	r26, 0x21	; 33
    2652:	1a 2e       	mov	r1, r26
    2654:	aa 1b       	sub	r26, r26
    2656:	bb 1b       	sub	r27, r27
    2658:	fd 01       	movw	r30, r26
    265a:	0d c0       	rjmp	.+26     	; 0x2676 <__udivmodsi4_ep>

0000265c <__udivmodsi4_loop>:
    265c:	aa 1f       	adc	r26, r26
    265e:	bb 1f       	adc	r27, r27
    2660:	ee 1f       	adc	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	a2 17       	cp	r26, r18
    2666:	b3 07       	cpc	r27, r19
    2668:	e4 07       	cpc	r30, r20
    266a:	f5 07       	cpc	r31, r21
    266c:	20 f0       	brcs	.+8      	; 0x2676 <__udivmodsi4_ep>
    266e:	a2 1b       	sub	r26, r18
    2670:	b3 0b       	sbc	r27, r19
    2672:	e4 0b       	sbc	r30, r20
    2674:	f5 0b       	sbc	r31, r21

00002676 <__udivmodsi4_ep>:
    2676:	66 1f       	adc	r22, r22
    2678:	77 1f       	adc	r23, r23
    267a:	88 1f       	adc	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	1a 94       	dec	r1
    2680:	69 f7       	brne	.-38     	; 0x265c <__udivmodsi4_loop>
    2682:	60 95       	com	r22
    2684:	70 95       	com	r23
    2686:	80 95       	com	r24
    2688:	90 95       	com	r25
    268a:	9b 01       	movw	r18, r22
    268c:	ac 01       	movw	r20, r24
    268e:	bd 01       	movw	r22, r26
    2690:	cf 01       	movw	r24, r30
    2692:	08 95       	ret

00002694 <_exit>:
    2694:	f8 94       	cli

00002696 <__stop_program>:
    2696:	ff cf       	rjmp	.-2      	; 0x2696 <__stop_program>
